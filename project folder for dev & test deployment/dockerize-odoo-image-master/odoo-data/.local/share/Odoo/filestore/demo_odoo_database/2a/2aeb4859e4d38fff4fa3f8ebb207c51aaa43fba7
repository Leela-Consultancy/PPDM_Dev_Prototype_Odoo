)]}'
{"version": 3, "sources": ["/website/static/src/js/form_editor_registry.js", "/website/static/src/js/menu/content.js", "/website/static/src/js/menu/customize.js", "/website/static/src/js/menu/debug_menu.js", "/website/static/src/js/menu/edit.js", "/website/static/src/js/menu/mobile_view.js", "/website/static/src/js/menu/new_content.js", "/website/static/src/js/menu/seo.js", "/website/static/src/js/menu/translate.js", "/website/static/src/js/set_view_track.js", "/website/static/src/js/tours/homepage.js", "/website/static/src/js/tours/tour_utils.js", "/website/static/src/js/widgets/ace.js"], "mappings": "AAAA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjznpOA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtpxBA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxneA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrTA;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["odoo.define('website.form_editor_registry', function (require) {\n'use strict';\n\nvar Registry = require('web.Registry');\n\nreturn new Registry();\n\n});\n\nodoo.define('website.send_mail_form', function (require) {\n'use strict';\n\nvar core = require('web.core');\nvar FormEditorRegistry = require('website.form_editor_registry');\n\nconst _lt = core._lt;\n\nFormEditorRegistry.add('send_mail', {\n    formFields: [{\n        type: 'char',\n        custom: true,\n        required: true,\n        fillWith: 'name',\n        name: 'name',\n        string: _lt('Your Name'),\n    }, {\n        type: 'tel',\n        custom: true,\n        fillWith: 'phone',\n        name: 'phone',\n        string: _lt('Phone Number'),\n    }, {\n        type: 'email',\n        modelRequired: true,\n        fillWith: 'email',\n        name: 'email_from',\n        string: _lt('Your Email'),\n    }, {\n        type: 'char',\n        custom: true,\n        fillWith: 'commercial_company_name',\n        name: 'company',\n        string: _lt('Your Company'),\n    }, {\n        type: 'char',\n        modelRequired: true,\n        name: 'subject',\n        string: _lt('Subject'),\n    }, {\n        type: 'text',\n        custom: true,\n        required: true,\n        name: 'description',\n        string: _lt('Your Question'),\n    }],\n    fields: [{\n        name: 'email_to',\n        type: 'char',\n        required: true,\n        string: _lt('Recipient Email'),\n        defaultValue: 'info@yourcompany.example.com',\n    }],\n});\n\n});\n", "/** @odoo-module alias=website.contentMenu */\n\nimport Class from 'web.Class';\nimport core from 'web.core';\nimport Dialog from 'web.Dialog';\nimport time from 'web.time';\nimport weWidgets from 'wysiwyg.widgets';\nimport websiteNavbarData from 'website.navbar';\nimport Widget from 'web.Widget';\nimport { Markup } from 'web.utils';\n\nimport { registry } from \"@web/core/registry\";\n\nvar _t = core._t;\nvar qweb = core.qweb;\n\nvar PagePropertiesDialog = weWidgets.Dialog.extend({\n    template: 'website.pagesMenu.page_info',\n    xmlDependencies: weWidgets.Dialog.prototype.xmlDependencies.concat(\n        ['/website/static/src/xml/website.pageProperties.xml']\n    ),\n    events: _.extend({}, weWidgets.Dialog.prototype.events, {\n        'keyup input#page_name': '_onNameChanged',\n        'keyup input#page_url': '_onUrlChanged',\n        'change input#create_redirect': '_onCreateRedirectChanged',\n        'click input#visibility_password': '_onPasswordClicked',\n        'change input#visibility_password': '_onPasswordChanged',\n        'change select#visibility': '_onVisibilityChanged',\n        'error.datetimepicker': '_onDateTimePickerError',\n    }),\n\n    /**\n     * @constructor\n     * @override\n     */\n    init: function (parent, page_id, options) {\n        var self = this;\n        var serverUrl = window.location.origin + '/';\n        var length_url = serverUrl.length;\n        var serverUrlTrunc = serverUrl;\n        if (length_url > 30) {\n            serverUrlTrunc = serverUrl.slice(0,14) + '..' + serverUrl.slice(-14);\n        }\n        this.serverUrl = serverUrl;\n        this.serverUrlTrunc = serverUrlTrunc;\n        this.current_page_url = window.location.pathname;\n        this.page_id = page_id;\n\n        var buttons = [\n            {text: _t(\"Save\"), classes: 'btn-primary', click: this.save},\n            {text: _t(\"Discard\"), classes: 'mr-auto', close: true},\n        ];\n        if (options.fromPageManagement) {\n            buttons.push({\n                text: _t(\"Go To Page\"),\n                icon: 'fa-globe',\n                classes: 'btn-link',\n                click: function (e) {\n                    window.location.href = '/' + self.page.url;\n                },\n            });\n        }\n        buttons.push({\n            text: _t(\"Duplicate Page\"),\n            icon: 'fa-clone',\n            classes: 'btn-link',\n            click: function (e) {\n                // modal('hide') will break the rpc, so hide manually\n                this.$el.closest('.modal').addClass('d-none');\n                _clonePage.call(this, self.page_id);\n            },\n        });\n        buttons.push({\n            text: _t(\"Delete Page\"),\n            icon: 'fa-trash',\n            classes: 'btn-link',\n            click: function (e) {\n                _deletePage.call(this, self.page_id, options.fromPageManagement);\n            },\n        });\n        this._super(parent, _.extend({}, {\n            title: _t(\"Page Properties\"),\n            size: 'medium',\n            buttons: buttons,\n        }, options || {}));\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var defs = [this._super.apply(this, arguments)];\n        var self = this;\n\n        defs.push(this._rpc({\n            model: 'website.page',\n            method: 'get_page_properties',\n            args: [this.page_id],\n        }).then(function (page) {\n            page.url = _.str.startsWith(page.url, '/') ? page.url.substring(1) : page.url;\n            page.hasSingleGroup = page.group_id !== undefined;\n            self.page = page;\n        }));\n\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n\n        var defs = [this._super.apply(this, arguments)];\n\n        this.$('.ask_for_redirect').addClass('d-none');\n        this.$('.redirect_type').addClass('d-none');\n        this.$('.warn_about_call').addClass('d-none');\n        if (this.page.visibility !== 'password') {\n            this.$('.show_visibility_password').addClass('d-none');\n        }\n        if (this.page.visibility !== 'restricted_group') {\n            this.$('.show_group_id').addClass('d-none');\n        }\n        this.autocompleteWithGroups(this.$('#group_id'));\n\n        defs.push(this._getPageDependencies(this.page_id)\n        .then(function (dependencies) {\n            var dep_text = [];\n            _.each(dependencies, function (value, index) {\n                if (value.length > 0) {\n                    dep_text.push(value.length + ' ' + index.toLowerCase());\n                }\n            });\n            dep_text = dep_text.join(', ');\n            self.$('#dependencies_redirect').html(qweb.render('website.show_page_dependencies', { dependencies: dependencies, dep_text: dep_text }));\n            self.$('a.o_dependencies_redirect_link').on('click', () => {\n                self.$('.o_dependencies_redirect_list_popover').popover({\n                    html: true,\n                    title: _t('Dependencies'),\n                    boundary: 'viewport',\n                    placement: 'right',\n                    trigger: 'focus',\n                    content: () => {\n                        return qweb.render('website.get_tooltip_dependencies', {\n                            dependencies: dependencies,\n                        });\n                    },\n                    template: qweb.render('website.page_dependencies_popover'),\n                }).popover('toggle');\n            });\n        }));\n\n        defs.push(this._getSupportedMimetype()\n        .then(function (mimetypes) {\n            self.supportedMimetype = mimetypes;\n        }));\n\n        defs.push(this._getPageKeyDependencies(this.page_id)\n        .then(function (dependencies) {\n            var dep_text = [];\n            _.each(dependencies, function (value, index) {\n                if (value.length > 0) {\n                    dep_text.push(value.length + ' ' + index.toLowerCase());\n                }\n            });\n            dep_text = dep_text.join(', ');\n            self.$('.warn_about_call').html(qweb.render('website.show_page_key_dependencies', {dependencies: dependencies, dep_text: dep_text}));\n            self.$('.warn_about_call [data-toggle=\"popover\"]').popover({\n               container: 'body',\n            });\n        }));\n\n        defs.push(this._rpc({model: 'res.users',\n                             method: 'has_group',\n                             args: ['website.group_multi_website']})\n                  .then(function (has_group) {\n                      if (!has_group) {\n                          self.$('#website_restriction').addClass('hidden');\n                      }\n                  }));\n\n        var datepickersOptions = {\n            minDate: moment({ y: 1000 }),\n            maxDate: moment().add(200, 'y'),\n            calendarWeeks: true,\n            icons : {\n                time: 'fa fa-clock-o',\n                date: 'fa fa-calendar',\n                next: 'fa fa-chevron-right',\n                previous: 'fa fa-chevron-left',\n                up: 'fa fa-chevron-up',\n                down: 'fa fa-chevron-down',\n            },\n            locale : moment.locale(),\n            format : time.getLangDatetimeFormat(),\n            widgetPositioning : {\n                horizontal: 'auto',\n                vertical: 'top',\n            },\n             widgetParent: 'body',\n        };\n        if (this.page.date_publish) {\n            datepickersOptions.defaultDate = time.str_to_datetime(this.page.date_publish);\n        }\n        this.$('#date_publish_container').datetimepicker(datepickersOptions);\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    destroy: function () {\n        $('.popover').popover('hide');\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    save: function (data) {\n        var self = this;\n        var context;\n        this.trigger_up('context_get', {\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        var url = this.$('#page_url').val();\n\n        var $datePublish = this.$(\"#date_publish\");\n        $datePublish.closest(\".form-group\").removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid');\n        var datePublish = $datePublish.val();\n        if (datePublish !== \"\") {\n            datePublish = this._parse_date(datePublish);\n            if (!datePublish) {\n                $datePublish.closest(\".form-group\").addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid');\n                return;\n            }\n        }\n        var params = {\n            id: this.page.id,\n            name: this.$('#page_name').val(),\n            // Replace duplicate following '/' by only one '/'\n            url: url.replace(/\\/{2,}/g, '/'),\n            is_menu: this.$('#is_menu').prop('checked'),\n            is_homepage: this.$('#is_homepage').prop('checked'),\n            website_published: this.$('#is_published').prop('checked'),\n            create_redirect: this.$('#create_redirect').prop('checked'),\n            redirect_type: this.$('#redirect_type').val(),\n            website_indexed: this.$('#is_indexed').prop('checked'),\n            visibility: this.$('#visibility').val(),\n            date_publish: datePublish,\n        };\n        if (this.page.hasSingleGroup && this.$('#visibility').val() === 'restricted_group') {\n            params['group_id'] = this.$('#group_id').data('group-id');\n        }\n        if (this.$('#visibility').val() === 'password') {\n            var field_pwd = $('#visibility_password');\n            if (!field_pwd.get(0).reportValidity()) {\n                return;\n            }\n            if (field_pwd.data('dirty')) {\n                params['visibility_pwd'] = field_pwd.val();\n            }\n        }\n\n        this._rpc({\n            model: 'website.page',\n            method: 'save_page_info',\n            args: [[context.website_id], params],\n        }).then(function (url) {\n            // If from page manager: reload url, if from page itself: go to\n            // (possibly) new url\n            var mo;\n            self.trigger_up('main_object_request', {\n                callback: function (value) {\n                    mo = value;\n                },\n            });\n            if (mo.model === 'website.page') {\n                window.location.href = url.toLowerCase();\n            } else {\n                window.location.reload(true);\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Retrieves the page URL dependencies for the given object id.\n     *\n     * @private\n     * @param {integer} moID\n     * @returns {Promise<Array>}\n     */\n    _getPageDependencies: function (moID) {\n        return this._rpc({\n            model: 'website',\n            method: 'page_search_dependencies',\n            args: [moID],\n        });\n    },\n    /**\n     * Retrieves the page's key dependencies for the given object id.\n     *\n     * @private\n     * @param {integer} moID\n     * @returns {Promise<Array>}\n     */\n    _getPageKeyDependencies: function (moID) {\n        return this._rpc({\n            model: 'website',\n            method: 'page_search_key_dependencies',\n            args: [moID],\n        });\n    },\n    /**\n     * Retrieves supported mimtype\n     *\n     * @private\n     * @returns {Promise<Array>}\n     */\n    _getSupportedMimetype: function () {\n        return this._rpc({\n            model: 'website',\n            method: 'guess_mimetype',\n        });\n    },\n    /**\n     * Returns information about the page main object.\n     *\n     * @private\n     * @returns {Object} model and id\n     */\n    _getMainObject: function () {\n        var repr = $('html').data('main-object');\n        var m = repr.match(/(.+)\\((\\d+),(.*)\\)/);\n        return {\n            model: m[1],\n            id: m[2] | 0,\n        };\n    },\n    /**\n     * Converts a string representing the browser datetime\n     * (exemple: Albanian: '2018-Qer-22 15.12.35.')\n     * to a string representing UTC in Odoo's datetime string format\n     * (exemple: '2018-04-22 13:12:35').\n     *\n     * The time zone of the datetime string is assumed to be the one of the\n     * browser and it will be converted to UTC (standard for Odoo).\n     *\n     * @private\n     * @param {String} value A string representing a datetime.\n     * @returns {String|false} A string representing an UTC datetime if the given value is valid, false otherwise.\n     */\n    _parse_date: function (value) {\n        var datetime = moment(value, time.getLangDatetimeFormat(), true);\n        if (datetime.isValid()) {\n            return time.datetime_to_str(datetime.toDate());\n        }\n        else {\n            return false;\n        }\n    },\n    /**\n     * Allows the given input to propose existing groups.\n     *\n     * @param {jQuery} $input\n     */\n    autocompleteWithGroups: function ($input) {\n        $input.autocomplete({\n            source: (request, response) => {\n                return this._rpc({\n                    model: 'res.groups',\n                    method: 'search_read',\n                    args: [[['name', 'ilike', request.term]], ['display_name']],\n                    kwargs: {\n                        limit: 15,\n                    },\n                }).then(founds => {\n                    founds = founds.map(g => ({'id': g['id'], 'label': g['display_name']}));\n                    response(founds);\n                });\n            },\n            change: (ev, ui) => {\n                var $target = $(ev.target);\n                if (!ui.item) {\n                    $target.val(\"\");\n                    $target.removeData('group-id');\n                } else {\n                    $target.data('group-id', ui.item.id);\n                }\n            },\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _onUrlChanged: function () {\n        var url = this.$('input#page_url').val();\n        this.$('.ask_for_redirect').toggleClass('d-none', url === this.page.url);\n    },\n    /**\n     * @private\n     */\n    _onNameChanged: function () {\n        var name = this.$('input#page_name').val();\n        // If the file type is a supported mimetype, check if it is t-called.\n        // If so, warn user. Note: different from page_search_dependencies which\n        // check only for url and not key\n        var ext = '.' + this.page.name.split('.').pop();\n        if (ext in this.supportedMimetype && ext !== '.html') {\n            this.$('.warn_about_call').toggleClass('d-none', name === this.page.name);\n        }\n    },\n    /**\n     * @private\n     */\n    _onCreateRedirectChanged: function () {\n        var createRedirect = this.$('input#create_redirect').prop('checked');\n        this.$('.redirect_type').toggleClass('d-none', !createRedirect);\n    },\n    /**\n     * @private\n     */\n    _onVisibilityChanged: function (ev) {\n        this.$('.show_visibility_password').toggleClass('d-none', ev.target.value !== 'password');\n        this.$('.show_group_id').toggleClass('d-none', ev.target.value !== 'restricted_group');\n        this.$('#visibility_password').attr('required', ev.target.value === 'password');\n    },\n    /**\n     * Library clears the wrong date format so just ignore error\n     *\n     * @private\n     */\n    _onDateTimePickerError: function (ev) {\n        return false;\n    },\n    /**\n     * @private\n     */\n    _onPasswordClicked: function (ev) {\n        ev.target.value = '';\n        this._onPasswordChanged();\n    },\n    /**\n     * @private\n     */\n    _onPasswordChanged: function () {\n        this.$('#visibility_password').data('dirty', 1);\n    },\n});\n\nvar MenuEntryDialog = weWidgets.LinkDialog.extend({\n    /**\n     * @constructor\n     */\n    init: function (parent, options, editable, data) {\n        this._super(parent, _.extend({\n            title: _t(\"Add a menu item\"),\n        }, options || {}), editable, _.extend({\n            needLabel: true,\n            content: data.name || '',\n            isNewWindow: data.new_window,\n        }, data || {}));\n\n        this.linkWidget.xmlDependencies = this.linkWidget.xmlDependencies.concat(['/website/static/src/xml/website.contentMenu.xml']);\n\n        const oldSave = this.linkWidget.save;\n        /**\n         * @override\n         */\n        this.linkWidget.save = () => {\n            var $e = this.$('#o_link_dialog_label_input');\n            if (!$e.val() || !$e[0].checkValidity()) {\n                $e.closest('.form-group').addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid');\n                $e.focus();\n                return Promise.reject();\n            }\n            return oldSave.bind(this.linkWidget)();\n        };\n\n        this.menuType = data.menuType;\n    },\n    /**\n     * @override\n     */\n    start: async function () {\n        const res = await this._super(...arguments);\n\n        // Remove style related elements\n        this.$('.o_link_dialog_preview').remove();\n        this.$('input[name=\"is_new_window\"], .link-style').closest('.form-group').remove();\n        this.$modal.find('.modal-lg').removeClass('modal-lg');\n        this.$('form.col-lg-8').removeClass('col-lg-8').addClass('col-12');\n\n        // Adapt URL label\n        this.$('label[for=\"o_link_dialog_label_input\"]').text(_t(\"Menu Label\"));\n\n        // Auto add '#' URL and hide the input if for mega menu\n        if (this.menuType === 'mega') {\n            var $url = this.$('input[name=\"url\"]');\n            $url.val('#').trigger('change');\n            $url.closest('.form-group').addClass('d-none');\n        }\n\n        return res;\n    },\n});\n\nvar SelectEditMenuDialog = weWidgets.Dialog.extend({\n    template: 'website.contentMenu.dialog.select',\n    xmlDependencies: weWidgets.Dialog.prototype.xmlDependencies.concat(\n        ['/website/static/src/xml/website.contentMenu.xml']\n    ),\n\n    /**\n     * @constructor\n     * @override\n     */\n    init: function (parent, options) {\n        var self = this;\n        self.roots = [{id: null, name: _t(\"Top Menu\")}];\n        $('[data-content_menu_id]').each(function () {\n            // Remove name fallback in master\n            self.roots.push({id: $(this).data('content_menu_id'), name: $(this).attr('name') || $(this).data('menu_name')});\n        });\n        this._super(parent, _.extend({}, {\n            title: _t(\"Select a Menu\"),\n            save_text: _t(\"Continue\")\n        }, options || {}));\n    },\n    /**\n     * @override\n     */\n    save: function () {\n        this.final_data = parseInt(this.$el.find('select').val() || null);\n        this._super.apply(this, arguments);\n    },\n});\n\nvar EditMenuDialog = weWidgets.Dialog.extend({\n    template: 'website.contentMenu.dialog.edit',\n    xmlDependencies: weWidgets.Dialog.prototype.xmlDependencies.concat(\n        ['/website/static/src/xml/website.contentMenu.xml']\n    ),\n    events: _.extend({}, weWidgets.Dialog.prototype.events, {\n        'click a.js_add_menu': '_onAddMenuButtonClick',\n        'click button.js_delete_menu': '_onDeleteMenuButtonClick',\n        'click button.js_edit_menu': '_onEditMenuButtonClick',\n    }),\n\n    /**\n     * @constructor\n     * @override\n     */\n    init: function (parent, options, rootID) {\n        this._super(parent, _.extend({}, {\n            title: _t(\"Edit Menu\"),\n            size: 'medium',\n        }, options || {}));\n        this.rootID = rootID;\n    },\n    /**\n     * @override\n     */\n    willStart: function () {\n        var defs = [this._super.apply(this, arguments)];\n        var context;\n        this.trigger_up('context_get', {\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        defs.push(this._rpc({\n            model: 'website.menu',\n            method: 'get_tree',\n            args: [context.website_id, this.rootID],\n        }).then(menu => {\n            this.menu = menu;\n            this.rootMenuID = menu.fields['id'];\n            this.flat = this._flatenize(menu);\n            this.toDelete = [];\n        }));\n        return Promise.all(defs);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var r = this._super.apply(this, arguments);\n        this.$('.oe_menu_editor').nestedSortable({\n            listType: 'ul',\n            handle: 'div',\n            items: 'li',\n            maxLevels: 2,\n            toleranceElement: '> div',\n            forcePlaceholderSize: true,\n            opacity: 0.6,\n            placeholder: 'oe_menu_placeholder',\n            tolerance: 'pointer',\n            attribute: 'data-menu-id',\n            expression: '()(.+)', // nestedSortable takes the second match of an expression (*sigh*)\n            isAllowed: (placeholder, placeholderParent, currentItem) => {\n                return !placeholderParent\n                    || !currentItem[0].dataset.megaMenu && !placeholderParent[0].dataset.megaMenu;\n            },\n        });\n        return r;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    save: function () {\n        var _super = this._super.bind(this);\n        var newMenus = this.$('.oe_menu_editor').nestedSortable('toArray', {startDepthCount: 0});\n        var levels = [];\n        var data = [];\n        var context;\n        this.trigger_up('context_get', {\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        // Resequence, re-tree and remove useless data\n        newMenus.forEach(menu => {\n            if (menu.id) {\n                levels[menu.depth] = (levels[menu.depth] || 0) + 1;\n                var menuFields = this.flat[menu.id].fields;\n                menuFields['sequence'] = levels[menu.depth];\n                menuFields['parent_id'] = menu['parent_id'] || this.rootMenuID;\n                data.push(menuFields);\n            }\n        });\n        return this._rpc({\n            model: 'website.menu',\n            method: 'save',\n            args: [\n                context.website_id,\n                {\n                    'data': data,\n                    'to_delete': this.toDelete,\n                }\n            ],\n        }).then(function () {\n            return _super();\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Returns a mapping id -> menu item containing all the menu items in the\n     * given menu hierarchy.\n     *\n     * @private\n     * @param {Object} node\n     * @param {Object} [_dict] internal use: the mapping being built\n     * @returns {Object}\n     */\n    _flatenize: function (node, _dict) {\n        _dict = _dict || {};\n        _dict[node.fields['id']] = node;\n        node.children.forEach(child => {\n            this._flatenize(child, _dict);\n        });\n        return _dict;\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when the \"add menu\" button is clicked -> Opens the appropriate\n     * dialog to edit this new menu.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onAddMenuButtonClick: function (ev) {\n        var menuType = ev.currentTarget.dataset.type;\n        var dialog = new MenuEntryDialog(this, {}, null, {\n            menuType: menuType,\n        });\n        dialog.on('save', this, link => {\n            var newMenu = {\n                'fields': {\n                    'id': _.uniqueId('new-'),\n                    'name': _.unescape(link.content),\n                    'url': link.url,\n                    'new_window': link.isNewWindow,\n                    'is_mega_menu': menuType === 'mega',\n                    'sequence': 0,\n                    'parent_id': false,\n                },\n                'children': [],\n                'is_homepage': false,\n            };\n            this.flat[newMenu.fields['id']] = newMenu;\n            this.$('.oe_menu_editor').append(\n                qweb.render('website.contentMenu.dialog.submenu', {submenu: newMenu})\n            );\n        });\n        dialog.open();\n    },\n    /**\n     * Called when the \"delete menu\" button is clicked -> Deletes this menu.\n     *\n     * @private\n     */\n    _onDeleteMenuButtonClick: function (ev) {\n        var $menu = $(ev.currentTarget).closest('[data-menu-id]');\n        var menuID = parseInt($menu.data('menu-id'));\n        if (menuID) {\n            this.toDelete.push(menuID);\n        }\n        $menu.remove();\n    },\n    /**\n     * Called when the \"edit menu\" button is clicked -> Opens the appropriate\n     * dialog to edit this menu.\n     *\n     * @private\n     */\n    _onEditMenuButtonClick: function (ev) {\n        var $menu = $(ev.currentTarget).closest('[data-menu-id]');\n        var menuID = $menu.data('menu-id');\n        var menu = this.flat[menuID];\n        if (menu) {\n            var dialog = new MenuEntryDialog(this, {}, null, _.extend({\n                menuType: menu.fields['is_mega_menu'] ? 'mega' : undefined,\n            }, menu.fields));\n            dialog.on('save', this, link => {\n                _.extend(menu.fields, {\n                    'name': _.unescape(link.content),\n                    'url': link.url,\n                    'new_window': link.isNewWindow,\n                });\n                $menu.find('.js_menu_label').first().text(menu.fields['name']);\n            });\n            dialog.open();\n        } else {\n            Dialog.alert(null, \"Could not find menu entry\");\n        }\n    },\n});\n\nvar PageOption = Class.extend({\n    /**\n     * @constructor\n     * @param {string} name\n     *        the option's name = the field's name in website.page model\n     * @param {*} value\n     * @param {function} setValueCallback\n     *        a function which simulates an option's value change without\n     *        asking the server to change it\n     */\n    init: function (name, value, setValueCallback) {\n        this.name = name;\n        this.value = value;\n        this.isDirty = false;\n        this.setValueCallback = setValueCallback;\n    },\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * Sets the new option's value thanks to the related callback.\n     *\n     * @param {*} [value]\n     *        by default: consider the current value is a boolean and toggle it\n     */\n    setValue: function (value) {\n        if (value === undefined) {\n            value = !this.value;\n        }\n        this.setValueCallback.call(this, value);\n        this.value = value;\n        this.isDirty = true;\n    },\n});\n\nvar ContentMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    xmlDependencies: ['/website/static/src/xml/website.xml'],\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions || {}, {\n        edit_menu: '_editMenu',\n        get_page_option: '_getPageOption',\n        on_save: '_onSave',\n        page_properties: '_pageProperties',\n        toggle_page_option: '_togglePageOption',\n    }),\n    pageOptionsSetValueCallbacks: {\n        header_overlay: function (value) {\n            $('#wrapwrap').toggleClass('o_header_overlay', value);\n        },\n        header_color: function (value) {\n            $('#wrapwrap > header').removeClass(this.value)\n                                   .addClass(value);\n        },\n        header_visible: function (value) {\n            $('#wrapwrap > header').toggleClass('d-none o_snippet_invisible', !value);\n        },\n        footer_visible: function (value) {\n            $('#wrapwrap > footer').toggleClass('d-none o_snippet_invisible', !value);\n        },\n    },\n\n    /**\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.pageOptions = {};\n        _.each($('.o_page_option_data'), function (el) {\n            var value = el.value;\n            if (value === \"True\") {\n                value = true;\n            } else if (value === \"False\") {\n                value = false;\n            }\n            self.pageOptions[el.name] = new PageOption(\n                el.name,\n                value,\n                self.pageOptionsSetValueCallbacks[el.name]\n            );\n        });\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Actions\n    //--------------------------------------------------------------------------\n\n    /**\n     * Asks the user which menu to edit if multiple menus exist on the page.\n     * Then opens the menu edition dialog.\n     * Then executes the given callback once the edition is saved, to finally\n     * reload the page.\n     *\n     * @private\n     * @param {function} [beforeReloadCallback]\n     * @returns {Promise}\n     *          Unresolved if the menu is edited and saved as the page will be\n     *          reloaded.\n     *          Resolved otherwise.\n     */\n    _editMenu: function (beforeReloadCallback) {\n        var self = this;\n        return new Promise(function (resolve) {\n            function resolveWhenEditMenuDialogIsCancelled(rootID) {\n                return self._openEditMenuDialog(rootID, beforeReloadCallback).then(resolve);\n            }\n            if ($('[data-content_menu_id]').length) {\n                var select = new SelectEditMenuDialog(self);\n                select.on('save', self, resolveWhenEditMenuDialogIsCancelled);\n                select.on('cancel', self, resolve);\n                select.open();\n            } else {\n                resolveWhenEditMenuDialogIsCancelled(null);\n            }\n        });\n    },\n    /**\n     *\n     * @param {*} rootID\n     * @param {function|undefied} beforeReloadCallback function that returns a promise\n     * @returns {Promise}\n     */\n    _openEditMenuDialog: function (rootID, beforeReloadCallback) {\n        var self = this;\n        return new Promise(function (resolve) {\n            var dialog = new EditMenuDialog(self, {}, rootID);\n            dialog.on('save', self, function () {\n                window.document.body.classList.add('o_wait_reload');\n                // Before reloading the page after menu modification, does the\n                // given action to do.\n                if (beforeReloadCallback) {\n                    // Reload the page so that the menu modification are shown\n                    beforeReloadCallback().then(function () {\n                        window.location.reload(true);\n                    });\n                } else {\n                    window.location.reload(true);\n                }\n            });\n            dialog.on('cancel', self, resolve);\n            dialog.open();\n        });\n    },\n\n    /**\n     * Retrieves the value of a page option.\n     *\n     * @private\n     * @param {string} name\n     * @returns {Promise<*>}\n     */\n    _getPageOption: function (name) {\n        var option = this.pageOptions[name];\n        if (!option) {\n            return Promise.reject();\n        }\n        return Promise.resolve(option.value);\n    },\n    /**\n     * On save, simulated page options have to be server-saved.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _onSave: function () {\n        var self = this;\n        var defs = _.map(this.pageOptions, function (option, optionName) {\n            if (option.isDirty) {\n                return self._togglePageOption({\n                    name: optionName,\n                    value: option.value,\n                }, true, true);\n            }\n        });\n        return Promise.all(defs);\n    },\n    /**\n     * Opens the page properties dialog.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _pageProperties: function () {\n        var mo;\n        this.trigger_up('main_object_request', {\n            callback: function (value) {\n                mo = value;\n            },\n        });\n        var dialog = new PagePropertiesDialog(this, mo.id, {}).open();\n        return dialog.opened();\n    },\n    /**\n     * Toggles a page option.\n     *\n     * @private\n     * @param {Object} params\n     * @param {string} params.name\n     * @param {*} [params.value] (change value by default true -> false -> true)\n     * @param {boolean} [forceSave=false]\n     * @param {boolean} [noReload=false]\n     * @returns {Promise}\n     */\n    _togglePageOption: function (params, forceSave, noReload) {\n        // First check it is a website page\n        var mo;\n        this.trigger_up('main_object_request', {\n            callback: function (value) {\n                mo = value;\n            },\n        });\n        if (mo.model !== 'website.page') {\n            return Promise.reject();\n        }\n\n        // Check if this is a valid option\n        var option = this.pageOptions[params.name];\n        if (!option) {\n            return Promise.reject();\n        }\n\n        // Toggle the value\n        option.setValue(params.value);\n\n        // If simulate is true, it means we want the option to be toggled but\n        // not saved on the server yet\n        if (!forceSave) {\n            // Add the 'o_dirty' class on an editable element specific to the\n            // page to notify the editor that the page should be saved,\n            // otherwise it won't save anything if it doesn't detect any change\n            // inside the #wrapwrap. (e.g. the header \"over the content\" option\n            // which adds a class on the #wrapwrap itself and not inside it).\n            const pageEl = document.querySelector(`.o_editable[data-oe-model=\"ir.ui.view\"][data-oe-id=\"${mo.viewid}\"]`);\n            if (pageEl) {\n                pageEl.classList.add('o_dirty');\n            }\n            return Promise.resolve();\n        }\n\n        // If not, write on the server page and reload the current location\n        var vals = {};\n        vals[params.name] = option.value;\n        var prom = this._rpc({\n            model: 'website.page',\n            method: 'write',\n            args: [[mo.id], vals],\n        });\n        if (noReload) {\n            return prom;\n        }\n        return prom.then(function () {\n            window.location.reload();\n            return new Promise(function () {});\n        });\n    },\n});\n\nvar PageManagement = Widget.extend({\n    xmlDependencies: ['/website/static/src/xml/website.xml'],\n    events: {\n        'click a.js_page_properties': '_onPagePropertiesButtonClick',\n        'click a.js_clone_page': '_onClonePageButtonClick',\n        'click a.js_delete_page': '_onDeletePageButtonClick',\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Retrieves the page dependencies for the given object id.\n     *\n     * @private\n     * @param {integer} moID\n     * @returns {Promise<Array>}\n     */\n    _getPageDependencies: function (moID) {\n        return this._rpc({\n            model: 'website',\n            method: 'page_search_dependencies',\n            args: [moID],\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    _onPagePropertiesButtonClick: function (ev) {\n        var moID = $(ev.currentTarget).data('id');\n        var dialog = new PagePropertiesDialog(this,moID, {'fromPageManagement': true}).open();\n        return dialog;\n    },\n    _onClonePageButtonClick: function (ev) {\n        var pageId = $(ev.currentTarget).data('id');\n        _clonePage.call(this, pageId);\n    },\n    _onDeletePageButtonClick: function (ev) {\n        var pageId = $(ev.currentTarget).data('id');\n        _deletePage.call(this, pageId, true);\n    },\n});\n\n/**\n * Deletes the page after showing a dependencies warning for the given page id.\n *\n * @private\n * @param {integer} pageId - The ID of the page to be deleted\n * @param {Boolean} fromPageManagement\n *                  Is the function called by the page manager?\n *                  It will affect redirect after page deletion: reload or '/'\n */\n// TODO: This function should be integrated in a widget in the future\nasync function _deletePage(pageId, fromPageManagement) {\n    const dependencies = await this._getPageDependencies(pageId);\n    for (const locs of Object.values(dependencies)) {\n        for (const loc of locs) {\n            loc.text = Markup(loc.text);\n        }\n    }\n    Dialog.safeConfirm(this, \"\", {\n        title: _t(\"Delete Page\"),\n        $content: $(qweb.render('website.delete_page', {dependencies: dependencies})),\n        async confirm_callback() {\n            await this._rpc({model: 'website.page', method: 'unlink', args: [pageId]});\n            if (fromPageManagement) {\n                window.location.reload(true);\n            } else {\n                window.location.href = '/';\n            }\n        }\n    });\n}\n/**\n * Duplicate the page after showing the wizard to enter new page name.\n *\n * @private\n * @param {integer} pageId - The ID of the page to be duplicate\n *\n */\nfunction _clonePage(pageId) {\n    var self = this;\n    new Promise(function (resolve, reject) {\n        Dialog.confirm(this, undefined, {\n            title: _t(\"Duplicate Page\"),\n            $content: $(qweb.render('website.duplicate_page_action_dialog')),\n            confirm_callback: function () {\n                return self._rpc({\n                    model: 'website.page',\n                    method: 'clone_page',\n                    args: [\n                        pageId,\n                        this.$('#page_name').val(),\n                    ],\n                }).then(function (path) {\n                    window.location.href = path;\n                }).guardedCatch(reject);\n            },\n            cancel_callback: reject,\n        }).on('closed', null, reject);\n    });\n}\n\nregistry.category(\"website_navbar_widgets\").add(\"ContentMenu\", {\n    Widget: ContentMenu,\n    selector: '#content-menu',\n});\nregistry.category(\"public_root_widgets\").add(\"PageManagement\", {\n    Widget: PageManagement,\n    selector: '#list_website_pages',\n});\n\nexport default {\n    PagePropertiesDialog: PagePropertiesDialog,\n    ContentMenu: ContentMenu,\n    EditMenuDialog: EditMenuDialog,\n    MenuEntryDialog: MenuEntryDialog,\n    SelectEditMenuDialog: SelectEditMenuDialog,\n};\n", "odoo.define('website.customizeMenu', function (require) {\n'use strict';\n\nvar core = require('web.core');\nvar Widget = require('web.Widget');\nvar websiteNavbarData = require('website.navbar');\nvar WebsiteAceEditor = require('website.ace');\n\nconst { registry } = require(\"@web/core/registry\");\n\nvar qweb = core.qweb;\n\nvar CustomizeMenu = Widget.extend({\n    xmlDependencies: ['/website/static/src/xml/website.editor.xml'],\n    events: {\n        'show.bs.dropdown': '_onDropdownShow',\n        'change .dropdown-item[data-view-key]': '_onCustomizeOptionChange',\n    },\n\n    /**\n     * @override\n     */\n    willStart: function () {\n        this.viewName = $(document.documentElement).data('view-xmlid');\n        return this._super.apply(this, arguments);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        if (!this.viewName) {\n            _.defer(this.destroy.bind(this));\n        }\n\n        if (this.$el.is('.show')) {\n            this._loadCustomizeOptions();\n        }\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Enables/Disables a view customization whose id is given.\n     *\n     * @private\n     * @param {string} viewKey\n     * @returns {Promise}\n     *          Unresolved if the customization succeeded as the page will be\n     *          reloaded.\n     *          Rejected otherwise.\n     */\n    _doCustomize: function (viewKey) {\n        return this._rpc({\n            route: '/website/toggle_switchable_view',\n            params: {\n                'view_key': viewKey,\n            },\n        }).then(function () {\n            window.location.reload();\n            return new Promise(function () {});\n        });\n    },\n    /**\n     * Loads the information about the views which can be enabled/disabled on\n     * the current page and shows them as switchable elements in the menu.\n     *\n     * @private\n     * @return {Promise}\n     */\n    _loadCustomizeOptions: function () {\n        if (this.__customizeOptionsLoaded) {\n            return Promise.resolve();\n        }\n        this.__customizeOptionsLoaded = true;\n\n        var $menu = this.$el.children('.dropdown-menu');\n        return this._rpc({\n            route: '/website/get_switchable_related_views',\n            params: {\n                key: this.viewName,\n            },\n        }).then(function (result) {\n            var currentGroup = '';\n            if (result.length) {\n                $menu.append($('<div/>', {\n                    class: 'dropdown-divider',\n                    role: 'separator',\n                }));\n            }\n            _.each(result, function (item) {\n                if (currentGroup !== item.inherit_id[1]) {\n                    currentGroup = item.inherit_id[1];\n                    $menu.append('<li class=\"dropdown-header\">' + currentGroup + '</li>');\n                }\n                var $label = $(qweb.render('website.components.switch', {id: 'switch-' + item.id, label: item.name}));\n                $label.attr(\"data-view-key\", item.key);\n                $label.find('input').prop('checked', !!item.active);\n                $menu.append($label);\n            });\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when a view's related switchable element is clicked -> enable /\n     * disable the related view.\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onCustomizeOptionChange: function (ev) {\n        ev.preventDefault();\n        var viewKey = $(ev.currentTarget).data('viewKey');\n        this._doCustomize(viewKey);\n    },\n    /**\n     * @private\n     */\n    _onDropdownShow: function () {\n        this._loadCustomizeOptions();\n    },\n});\n\nvar AceEditorMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions || {}, {\n        close_all_widgets: '_hideEditor',\n        edit: '_enterEditMode',\n        ace: '_launchAce',\n    }),\n\n    /**\n     * Launches the ace editor automatically when the corresponding hash is in\n     * the page URL.\n     *\n     * @override\n     */\n    start: function () {\n        if (window.location.hash.substr(0, WebsiteAceEditor.prototype.hash.length) === WebsiteAceEditor.prototype.hash) {\n            this._launchAce();\n        }\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Actions\n    //--------------------------------------------------------------------------\n\n    /**\n     * When handling the \"edit\" website action, the ace editor has to be closed.\n     *\n     * @private\n     */\n    _enterEditMode: function () {\n        this._hideEditor();\n    },\n    /**\n     * @private\n     */\n    _hideEditor: function () {\n        if (this.globalEditor) {\n            this.globalEditor.do_hide();\n        }\n    },\n    /**\n     * Launches the ace editor to be able to edit the templates and scss files\n     * which are used by the current page.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _launchAce: function () {\n        var self = this;\n        var prom = new Promise(function (resolve, reject) {\n            self.trigger_up('action_demand', {\n                actionName: 'close_all_widgets',\n                onSuccess: resolve,\n                onFailure: reject,\n            });\n        });\n        prom.then(function () {\n            if (self.globalEditor) {\n                self.globalEditor.do_show();\n                return Promise.resolve();\n            } else {\n                var currentHash = window.location.hash;\n                var indexOfView = currentHash.indexOf(\"?res=\");\n                var initialResID = undefined;\n                if (indexOfView >= 0) {\n                    initialResID = currentHash.substr(indexOfView + (\"?res=\".length));\n                    var parsedResID = parseInt(initialResID, 10);\n                    if (parsedResID) {\n                        initialResID = parsedResID;\n                    }\n                }\n\n                self.globalEditor = new WebsiteAceEditor(self, $(document.documentElement).data('view-xmlid'), {\n                    initialResID: initialResID,\n                    defaultBundlesRestriction: [\n                        'web.assets_frontend',\n                        'web.assets_frontend_minimal',\n                        'web.assets_frontend_lazy',\n                    ],\n                });\n                return self.globalEditor.appendTo(document.body);\n            }\n        });\n\n        return prom;\n    },\n});\n\nregistry.category(\"website_navbar_widgets\").add(\"CustomizeMenu\", {\n    Widget: CustomizeMenu,\n    selector: '#customize-menu',\n});\nregistry.category(\"website_navbar_widgets\").add(\"AceEditorMenu\", {\n    Widget: AceEditorMenu,\n    selector: '#html_editor',\n});\n\nreturn CustomizeMenu;\n});\n", "/** @odoo-module */\nimport { registry } from \"@web/core/registry\";\nimport { DebugMenuBasic } from \"@web/core/debug/debug_menu_basic\";\nimport { createDebugContext } from \"@web/core/debug/debug_context\";\n\nconst debugMenuService = {\n    dependencies: [\"localization\", \"orm\"],\n    start(env) {\n        if (env.debug) {\n            const systray = document.querySelector('.o_menu_systray');\n            if (systray) {\n                Object.assign(env, createDebugContext(env, {categories: [\"default\"]}));\n                owl.mount(DebugMenuBasic, {\n                    target: systray,\n                    position: 'first-child',\n                    env,\n                });\n            }\n        }\n    }\n};\nregistry.category(\"services\").add(\"website_debug_menu\", debugMenuService);\n", "odoo.define('website.editMenu', function (require) {\n'use strict';\n\nvar core = require('web.core');\nvar dom = require('web.dom');\nvar wysiwygLoader = require('web_editor.loader');\nvar websiteNavbarData = require('website.navbar');\nvar Dialog = require('web.Dialog');\n\nconst { registry } = require(\"@web/core/registry\");\nconst { isMediaElement } = require('@web_editor/../lib/odoo-editor/src/utils/utils');\n\nvar _t = core._t;\n\n/**\n * Adds the behavior when clicking on the 'edit' button (+ editor interaction)\n */\nvar EditPageMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    assetLibs: ['web_editor.compiled_assets_wysiwyg', 'website.compiled_assets_wysiwyg'],\n\n    xmlDependencies: ['/website/static/src/xml/website.editor.xml'],\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions, {\n        edit: '_startEditMode',\n        on_save: '_onSave',\n    }),\n    custom_events: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.custom_events || {}, {\n        content_will_be_destroyed: '_onContentWillBeDestroyed',\n        content_was_recreated: '_onContentWasRecreated',\n        snippet_will_be_cloned: '_onSnippetWillBeCloned',\n        snippet_cloned: '_onSnippetCloned',\n        snippet_dropped: '_onSnippetDropped',\n        snippet_removed: '_onSnippetRemoved',\n        edition_will_stopped: '_onEditionWillStop',\n        edition_was_stopped: '_onEditionWasStopped',\n        request_save: '_onSnippetRequestSave',\n        request_cancel: '_onSnippetRequestCancel',\n    }),\n\n    /**\n     * @constructor\n     */\n    init: function (parent, options = {}) {\n        this._super.apply(this, arguments);\n        this.options = options;\n        this.wysiwygOptions = options.wysiwygOptions || {};\n        var context;\n        this.trigger_up('context_get', {\n            extra: true,\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        this.oeStructureSelector = '#wrapwrap .oe_structure[data-oe-xpath][data-oe-id]';\n        this.oeFieldSelector = '#wrapwrap [data-oe-field]';\n        this.oeRecordCoverSelector = \"#wrapwrap .o_record_cover_container[data-res-model]\";\n        this.oeCoverSelector = `#wrapwrap .s_cover[data-res-model], ${this.oeRecordCoverSelector}`;\n        if (options.savableSelector) {\n            this.savableSelector = options.savableSelector;\n        } else {\n            this.savableSelector = `${this.oeStructureSelector}, ${this.oeFieldSelector}, ${this.oeCoverSelector}`;\n        }\n        this.editableFromEditorMenu = options.editableFromEditorMenu || this.editableFromEditorMenu;\n        this._editorAutoStart = (context.editable && window.location.search.indexOf('enable_editor') >= 0);\n        var url = new URL(window.location.href);\n        url.searchParams.delete('enable_editor');\n        url.searchParams.delete('with_loader');\n        window.history.replaceState({}, null, url);\n    },\n    /**\n     * Auto-starts the editor if necessary or add the welcome message otherwise.\n     *\n     * @override\n     */\n    start() {\n        var def = this._super.apply(this, arguments);\n\n        // If we auto start the editor, do not show a welcome message\n        if (this._editorAutoStart) {\n            return Promise.all([def, this._startEditMode()]);\n        }\n\n        // Check that the page is empty\n        var $wrap = this._targetForEdition().filter('#wrapwrap.homepage').find('#wrap');\n\n        if ($wrap.length && $wrap.html().trim() === '') {\n            // If readonly empty page, show the welcome message\n            this.$welcomeMessage = $(core.qweb.render('website.homepage_editor_welcome_message'));\n            this.$welcomeMessage.addClass('o_homepage_editor_welcome_message');\n            this.$welcomeMessage.css('min-height', $wrap.parent('main').height() - ($wrap.outerHeight(true) - $wrap.height()));\n            $wrap.empty().append(this.$welcomeMessage);\n        }\n\n        return def;\n    },\n\n    /**\n     * Asks the snippets to clean themself, then saves the page, then reloads it\n     * if asked to.\n     *\n     * @param {boolean} [reload=true]\n     *        true if the page has to be reloaded after the save\n     * @returns {Promise}\n     */\n    save: async function (reload = true) {\n        if (this._saving) {\n            return false;\n        }\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = undefined;\n        }\n        var self = this;\n        this._saving = true;\n        this.trigger_up('edition_will_stopped', {\n            // TODO adapt in master, this was added as a stable fix. This\n            // trigger to 'edition_will_stopped' was left by mistake\n            // during an editor refactoring + revert fail. It stops the public\n            // widgets at the wrong time, potentially dead-locking the editor.\n            // 'ready_to_clean_for_save' is the one in charge of stopping the\n            // widgets at the proper time.\n            noWidgetsStop: true,\n        });\n        const destroy = () => {\n            self.wysiwyg.destroy();\n            self.trigger_up('edition_was_stopped');\n            self.destroy();\n        };\n        if (!this.wysiwyg.isDirty()) {\n            destroy();\n            if (reload) {\n                window.location.reload();\n            }\n            return;\n        }\n        this.wysiwyg.__edition_will_stopped_already_done = true; // TODO adapt in master, see above\n        return this.wysiwyg.saveContent(false).then((result) => {\n            delete this.wysiwyg.__edition_will_stopped_already_done;\n            var $wrapwrap = $('#wrapwrap');\n            self.editableFromEditorMenu($wrapwrap).removeClass('o_editable');\n            if (reload) {\n                // remove top padding because the connected bar is not visible\n                $('body').removeClass('o_connected_user');\n                return self._reload();\n            } else {\n                destroy();\n            }\n            return true;\n        }).guardedCatch(() => {\n            this._saving = false;\n        });\n    },\n    /**\n     * Asks the user if they really wants to discard their changes (if any),\n     * then simply reloads the page if they want to.\n     *\n     * @param {boolean} [reload=true]\n     *        true if the page has to be reloaded when the user answers yes\n     *        (do nothing otherwise but add this to allow class extension)\n     * @returns {Deferred}\n     */\n    cancel: function (reload = true) {\n        var self = this;\n        var def = new Promise(function (resolve, reject) {\n            // TODO improve in master: the way we check if the page is dirty\n            // should match the fact the save will actually do something or not.\n            // Right now, this check checks the whole page, including the non\n            // editable parts, regardless of the fact something can be saved\n            // inside or not. It is also thus of course considering the page\n            // dirty too often by mistake since non editable parts can have\n            // their DOM changed without impacting the save (e.g. menus being\n            // folded into the \"+\" menu for example).\n            if (!self.wysiwyg.isDirty()) {\n                resolve();\n            } else {\n                var confirm = Dialog.confirm(self, _t(\"If you discard the current edits, all unsaved changes will be lost. You can cancel to return to edit mode.\"), {\n                    confirm_callback: resolve,\n                });\n                confirm.on('closed', self, reject);\n            }\n        });\n\n        return def.then(function () {\n            self.trigger_up('edition_will_stopped');\n            var $wrapwrap = $('#wrapwrap');\n            self.editableFromEditorMenu($wrapwrap).removeClass('o_editable');\n            if (reload) {\n                window.onbeforeunload = null;\n                self.wysiwyg.destroy();\n                return self._reload();\n            } else {\n                self.wysiwyg.destroy();\n                self.trigger_up('readonly_mode');\n                self.trigger_up('edition_was_stopped');\n                self.destroy();\n            }\n        });\n    },\n    /**\n     * Returns the editable areas on the page.\n     *\n     * @param {DOM} $wrapwrap\n     * @returns {jQuery}\n     */\n    editableFromEditorMenu: function ($wrapwrap) {\n        return $wrapwrap.find('[data-oe-model]')\n            .not('.o_not_editable')\n            .filter(function () {\n                var $parent = $(this).closest('.o_editable, .o_not_editable');\n                return !$parent.length || $parent.hasClass('o_editable');\n            })\n            .not('link, script')\n            .not('[data-oe-readonly]')\n            .not('img[data-oe-field=\"arch\"], br[data-oe-field=\"arch\"], input[data-oe-field=\"arch\"]')\n            .not('.oe_snippet_editor')\n            .not('hr, br, input, textarea')\n            .add('.o_editable');\n    },\n\n    //--------------------------------------------------------------------------\n    // Actions\n    //--------------------------------------------------------------------------\n\n    /**\n     * Creates an editor instance and appends it to the DOM. Also remove the\n     * welcome message if necessary.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _startEditMode: async function () {\n        var self = this;\n        if (this.editModeEnable) {\n            return;\n        }\n\n        $.blockUI({overlayCSS: {\n            backgroundColor: '#000',\n            opacity: 0,\n            zIndex: 1050\n        }, message: false});\n\n        this.trigger_up('widgets_stop_request', {\n            $target: this._targetForEdition(),\n        });\n        if (this.$welcomeMessage) {\n            this.$welcomeMessage.detach(); // detach from the readonly rendering before the clone by wysiwyg.\n        }\n        this.editModeEnable = true;\n\n        await this._createWysiwyg();\n\n        var res = await new Promise(function (resolve, reject) {\n            self.trigger_up('widgets_start_request', {\n                editableMode: true,\n                onSuccess: resolve,\n                onFailure: reject,\n            });\n        });\n\n        const $loader = $('div.o_theme_install_loader_container');\n        if ($loader) {\n            $loader.remove();\n        }\n\n        $.unblockUI();\n\n        return res;\n    },\n    /**\n     * On save, the editor will ask to parent widgets if something needs to be\n     * done first. The website navbar will receive that demand and asks to its\n     * action-capable components to do something. For example, the content menu\n     * handles page-related options saving. However, some users with limited\n     * access rights do not have the content menu... but the website navbar\n     * expects that the save action is performed. So, this empty action is\n     * defined here so that all users have an 'on_save' related action.\n     *\n     * @private\n     * @todo improve the system to somehow declare required/optional actions\n     */\n    _onSave: function () {},\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    async _createWysiwyg() {\n        var $wrapwrap = $('#wrapwrap');\n        $wrapwrap.removeClass('o_editable'); // clean the dom before edition\n        this.editableFromEditorMenu($wrapwrap).addClass('o_editable');\n\n        this.wysiwyg = await this._wysiwygInstance();\n\n        await this.wysiwyg.attachTo($('#wrapwrap'));\n        this.trigger_up('edit_mode');\n        this.$el.css({width: ''});\n\n        // Only make the odoo structure and fields editable.\n        this.wysiwyg.odooEditor.observerUnactive();\n        $('#wrapwrap').on('click.odoo-website-editor', '*', this, this._preventDefault);\n        this._addEditorMessages(); // Insert editor messages in the DOM without observing.\n        if (this.options.beforeEditorActive) {\n            this.options.beforeEditorActive();\n        }\n        this.wysiwyg.odooEditor.observerActive();\n\n        // 1. Make sure every .o_not_editable is not editable.\n        // 2. Observe changes to mark dirty structures and fields.\n        const processRecords = (records) => {\n            records = this.wysiwyg.odooEditor.filterMutationRecords(records);\n            // Skip the step for this stack because if the editor undo the first\n            // step that has a dirty element, the following code would have\n            // generated a new stack and break the \"redo\" of the editor.\n            this.wysiwyg.odooEditor.automaticStepSkipStack();\n\n            for (const record of records) {\n                if (record.attributeName === 'contenteditable') {\n                    continue;\n                }\n\n                const $savable = $(record.target).closest(this.savableSelector);\n                if (!$savable.length) {\n                    continue;\n                }\n\n                // Mark any savable element dirty if any tracked mutation occurs\n                // inside of it.\n                $savable.not('.o_dirty').each(function () {\n                    if (!this.hasAttribute('data-oe-readonly')) {\n                        this.classList.add('o_dirty');\n                    }\n                });\n\n                if (this.options.processRecordsCallback) {\n                    for (const el of $savable) {\n                        this.options.processRecordsCallback(record, el);\n                    }\n                }\n            }\n        };\n        this.observer = new MutationObserver(processRecords);\n        const observe = () => {\n            if (this.observer) {\n                this.observer.observe(document.body, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    attributeOldValue: true,\n                    characterData: true,\n                });\n            }\n        };\n        observe();\n\n        this.wysiwyg.odooEditor.addEventListener('observerUnactive', () => {\n            if (this.observer) {\n                processRecords(this.observer.takeRecords());\n                this.observer.disconnect();\n            }\n        });\n        this.wysiwyg.odooEditor.addEventListener('observerActive', observe);\n\n        $('body').addClass('editor_started');\n    },\n\n    _getContentEditableAreas() {\n        const $savableZones = $(this.savableSelector);\n        const $editableSavableZones = $savableZones\n            .not('input, [data-oe-readonly], ' +\n                 '[data-oe-type=\"monetary\"], [data-oe-many2one-id], [data-oe-field=\"arch\"]:empty')\n            .filter((_, el) => {\n                // The whole record cover is considered editable by the editor,\n                // which makes it possible to add content (text, images,...)\n                // from the text tools. To fix this issue, we need to reduce the\n                // editable area to its editable fields only, but first, we need\n                // to remove the cover along with its descendants from the\n                // initial editable zones.\n                return !$(el).closest('.o_not_editable').length && !el.closest(this.oeRecordCoverSelector);\n            });\n\n        // TODO migrate in master. This stable fix restores the possibility to\n        // edit the company team snippet images on subsequent editions. Indeed\n        // this badly relied on the contenteditable=\"true\" attribute being on\n        // those images but it is rightfully lost after the first save. Later,\n        // the o_editable_media class system was implemented and the class was\n        // added in the snippet template but this did not solve existing\n        // snippets in user databases.\n        let $extraEditableZones = $editableSavableZones.find('.s_company_team .o_not_editable *')\n            .filter((i, el) => isMediaElement(el) || el.tagName === 'IMG');\n\n        // To make sure the selection remains bounded to the active tab,\n        // each tab is made non editable while keeping its nested\n        // oe_structure editable. This avoids having a selection range span\n        // over all further inactive tabs when using Chrome.\n        // grep: .s_tabs\n        $extraEditableZones = $extraEditableZones.add($editableSavableZones.find('.tab-pane > .oe_structure'))\n            .add(document.querySelectorAll(`${this.oeRecordCoverSelector} [data-oe-field]:not([data-oe-field=\"arch\"])`));\n\n        return $editableSavableZones.add($extraEditableZones).toArray();\n    },\n\n    _getReadOnlyAreas () {\n        // To make sure the selection remains bounded to the active tab,\n        // each tab is made non editable while keeping its nested\n        // oe_structure editable. This avoids having a selection range span\n        // over all further inactive tabs when using Chrome.\n        // grep: .s_tabs\n        return [...document.querySelectorAll('.tab-pane > .oe_structure')].map(el => el.parentNode);\n    },\n    _getUnremovableElements () {\n        // TODO adapt in master: this was added as a fix to target some elements\n        // to be unremovable. This fix had to be reverted but to keep things\n        // stable, this still had to return the same thing: a NodeList. This\n        // code here seems the only (?) way to create a static empty NodeList.\n        // In master, this should return an array as it seems intended by the\n        // library caller anyway.\n        return document.querySelectorAll('.a:not(.a)');\n    },\n    /**\n     * Call preventDefault of an event.\n     *\n     * @private\n     */\n    _preventDefault(e) {\n        e.preventDefault();\n    },\n    /**\n     * Adds automatic editor messages on drag&drop zone elements.\n     *\n     * @private\n     */\n    _addEditorMessages: function () {\n        const $editable = this._targetForEdition()\n            .find('.oe_structure.oe_empty, [data-oe-type=\"html\"]')\n            .filter(':o_editable');\n        this.$editorMessageElements = $editable\n            .not('[data-editor-message]')\n            .attr('data-editor-message', _t('DRAG BUILDING BLOCKS HERE'));\n        $editable.filter(':empty').attr('contenteditable', false);\n    },\n    /**\n     * Returns the target for edition.\n     *\n     * @private\n     * @returns {JQuery}\n     */\n    _targetForEdition: function () {\n        return $('#wrapwrap'); // TODO should know about this element another way\n    },\n    /**\n     * Reloads the page in non-editable mode, with the right scrolling.\n     *\n     * @private\n     * @returns {Deferred} (never resolved, the page is reloading anyway)\n     */\n    _reload: function () {\n        $('body').addClass('o_wait_reload');\n        this.wysiwyg.destroy();\n        this.$el.hide();\n        window.location.hash = 'scrollTop=' + window.document.body.scrollTop;\n        window.location.reload(true);\n        return new Promise(function () {});\n    },\n    /**\n     * @private\n     */\n    _wysiwygInstance: function () {\n        // todo: retrieve other config if there is no #wrap element on the page (eg. product, blog, ect.)\n        let collaborationConfig = {};\n        // todo: To uncomment when enabling the collaboration on website.\n        // const $wrap = $('#wrapwrap #wrap[data-oe-model][data-oe-field][data-oe-id]');\n        // if ($wrap.length) {\n        //     collaborationConfig = {\n        //         collaborationChannel: {\n        //             collaborationModelName: $wrap.attr('data-oe-model'),\n        //             collaborationFieldName: $wrap.attr('data-oe-field'),\n        //             collaborationResId: parseInt($wrap.attr('data-oe-id')),\n        //         }\n        //     };\n        // }\n\n        var context;\n        this.trigger_up('context_get', {\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        const params = Object.assign({\n            snippets: 'website.snippets',\n            recordInfo: {\n                context: context,\n                data_res_model: 'website',\n                data_res_id: context.website_id,\n            },\n            enableWebsite: true,\n            discardButton: true,\n            saveButton: true,\n            devicePreview: true,\n            savableSelector: this.savableSelector,\n            isRootEditable: false,\n            controlHistoryFromDocument: true,\n            getContentEditableAreas: this._getContentEditableAreas.bind(this),\n            powerboxCommands: this._getSnippetsCommands(),\n            bindLinkTool: true,\n            showEmptyElementHint: false,\n            getReadOnlyAreas: this._getReadOnlyAreas.bind(this),\n            getUnremovableElements: this._getUnremovableElements.bind(this),\n        }, collaborationConfig);\n        return wysiwygLoader.createWysiwyg(this,\n            Object.assign(params, this.wysiwygOptions),\n            ['website.compiled_assets_wysiwyg']\n        );\n    },\n    _getSnippetsCommands: function () {\n        const snippetCommandCallback = (selector) => {\n            const $separatorBody = $(selector);\n            const $clonedBody = $separatorBody.clone().removeClass('oe_snippet_body');\n            const range = this.wysiwyg.getDeepRange();\n            const block = this.wysiwyg.closestElement(range.endContainer, 'p, div, ol, ul, cl, h1, h2, h3, h4, h5, h6');\n            if (block) {\n                block.after($clonedBody[0]);\n                this.wysiwyg.snippetsMenu.callPostSnippetDrop($clonedBody);\n            }\n        };\n        return [\n            {\n                groupName: _t('Website'),\n                title: _t('Alert'),\n                description: _t('Insert an alert snippet.'),\n                fontawesome: 'fa-info',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_alert\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Rating'),\n                description: _t('Insert a rating snippet.'),\n                fontawesome: 'fa-star-half-o',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_rating\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Card'),\n                description: _t('Insert a card snippet.'),\n                fontawesome: 'fa-sticky-note',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_card\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Share'),\n                description: _t('Insert a share snippet.'),\n                fontawesome: 'fa-share-square-o',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_share\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Text Highlight'),\n                description: _t('Insert a text Highlight snippet.'),\n                fontawesome: 'fa-sticky-note',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_text_highlight\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Chart'),\n                description: _t('Insert a chart snippet.'),\n                fontawesome: 'fa-bar-chart',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_chart\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Progress Bar'),\n                description: _t('Insert a progress bar snippet.'),\n                fontawesome: 'fa-spinner',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_progress_bar\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Badge'),\n                description: _t('Insert a badge snippet.'),\n                fontawesome: 'fa-tags',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_badge\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Blockquote'),\n                description: _t('Insert a blockquote snippet.'),\n                fontawesome: 'fa-quote-left',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_blockquote\"]');\n                },\n            },\n            {\n                groupName: _t('Website'),\n                title: _t('Separator'),\n                description: _t('Insert an horizontal separator sippet.'),\n                fontawesome: 'fa-minus',\n                isDisabled: () => !this.wysiwyg.odooEditor.isSelectionInBlockRoot(),\n                callback: () => {\n                    snippetCommandCallback('.oe_snippet_body[data-snippet=\"s_hr\"]');\n                },\n            },\n        ];\n    },\n\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when content will be destroyed in the page. Notifies the\n     * WebsiteRoot that is should stop the public widgets.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onContentWillBeDestroyed: function (ev) {\n        this.trigger_up('widgets_stop_request', {\n            $target: ev.data.$target,\n        });\n    },\n    /**\n     * Called when content was recreated in the page. Notifies the\n     * WebsiteRoot that is should start the public widgets.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onContentWasRecreated: function (ev) {\n        this.trigger_up('widgets_start_request', {\n            editableMode: true,\n            $target: ev.data.$target,\n        });\n    },\n    /**\n     * Called when edition will stop.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onEditionWillStop: function (ev) {\n        this.$editorMessageElements && this.$editorMessageElements.removeAttr('data-editor-message');\n\n        if (!ev.data.noWidgetsStop) { // TODO adapt in master, this was added as a stable fix.\n            this.trigger_up('widgets_stop_request', {\n                $target: this._targetForEdition(),\n            });\n        }\n\n        if (this.observer) {\n            this.observer.disconnect();\n            this.observer = undefined;\n        }\n    },\n    /**\n     * Called when edition was stopped. Notifies the\n     * WebsiteRoot that is should start the public widgets.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onEditionWasStopped: function (ev) {\n        this.editModeEnable = false;\n    },\n    /**\n     * Called when a snippet is about to be cloned in the page. Notifies the\n     * WebsiteRoot that is should destroy the animations for this snippet.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSnippetWillBeCloned: function (ev) {\n        this.trigger_up('widgets_stop_request', {\n            $target: ev.data.$target,\n        });\n    },\n    /**\n     * Called when a snippet is cloned in the page. Notifies the WebsiteRoot\n     * that is should start the public widgets for this snippet and the snippet it\n     * was cloned from.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSnippetCloned: function (ev) {\n        this.trigger_up('widgets_start_request', {\n            editableMode: true,\n            $target: ev.data.$target,\n        });\n        // TODO: remove in saas-12.5, undefined $origin will restart #wrapwrap\n        if (ev.data.$origin) {\n            this.trigger_up('widgets_start_request', {\n                editableMode: true,\n                $target: ev.data.$origin,\n            });\n        }\n    },\n    /**\n     * Called when a snippet is dropped in the page. Notifies the WebsiteRoot\n     * that is should start the public widgets for this snippet. Also marks the\n     * wrapper element as non-empty and makes it editable.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSnippetDropped: function (ev) {\n        this._targetForEdition().find('.oe_structure.oe_empty, [data-oe-type=\"html\"]')\n            .attr('contenteditable', true);\n        ev.data.addPostDropAsync(new Promise(resolve => {\n            this.trigger_up('widgets_start_request', {\n                editableMode: true,\n                $target: ev.data.$target,\n                onSuccess: () => resolve(),\n            });\n        }));\n    },\n    /**\n     * Called when a snippet is removed from the page. If the wrapper element is\n     * empty, marks it as such and shows the editor messages.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSnippetRemoved: function (ev) {\n        const $editable = this._targetForEdition().find('.oe_structure.oe_empty, [data-oe-type=\"html\"]');\n        if (!$editable.children().length) {\n            $editable.empty(); // remove any superfluous whitespace\n            this._addEditorMessages();\n        }\n    },\n    /**\n     * Snippet (menu_data) can request to save the document to leave the page\n     *\n     * @private\n     * @param {OdooEvent} ev\n     * @param {object} ev.data\n     * @param {function} ev.data.onSuccess\n     * @param {function} ev.data.onFailure\n     */\n    _onSnippetRequestSave: function (ev) {\n        ev.stopPropagation();\n        const restore = dom.addButtonLoadingEffect($('button[data-action=save]')[0]);\n        this.save(ev.data.reload).then(ev.data.onSuccess, ev.data.onFailure).then(restore).guardedCatch(restore);\n    },\n    /**\n     * Asks the user if they really wants to discard their changes (if any),\n     * then simply reloads the page if they want to.\n     *\n     * @private\n     * @param {OdooEvent} ev\n     */\n    _onSnippetRequestCancel: function (ev) {\n        ev.stopPropagation();\n        this.cancel();\n    },\n});\n\nregistry.category(\"website_navbar_widgets\").add(\"EditPageMenu\", {\n    Widget: EditPageMenu,\n    selector: '#edit-page-menu',\n});\n\nreturn EditPageMenu;\n});\n", "odoo.define('website.mobile', function (require) {\n'use strict';\n\nconst {_t} = require('web.core');\nconst {Markup} = require('web.utils');\nvar Dialog = require('web.Dialog');\nvar websiteNavbarData = require('website.navbar');\n\nconst { registry } = require(\"@web/core/registry\");\n\nvar MobilePreviewDialog = Dialog.extend({\n    /**\n     * Tweaks the modal so that it appears as a phone and modifies the iframe\n     * rendering to show more accurate mobile view.\n     *\n     * @override\n     */\n    start: function () {\n        var self = this;\n        this.$modal.addClass('oe_mobile_preview');\n        this.$modal.on('click', '.modal-header', function () {\n            self.$el.toggleClass('o_invert_orientation');\n        });\n        this.$iframe = $('<iframe/>', {\n            id: 'mobile-viewport',\n            src: $.param.querystring(window.location.href, 'mobilepreview'),\n        });\n        this.$iframe.on('load', function (e) {\n            self.$iframe.contents().find('body').removeClass('o_connected_user');\n            self.$iframe.contents().find('#oe_main_menu_navbar').remove();\n        });\n        this.$iframe.appendTo(this.$el);\n\n        return this._super.apply(this, arguments);\n    },\n});\n\nvar MobileMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions || {}, {\n        'show-mobile-preview': '_onMobilePreviewClick',\n    }),\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when the mobile action is triggered -> instantiate the mobile\n     * preview dialog.\n     *\n     * @private\n     */\n    _onMobilePreviewClick: function () {\n        if (this.mobilePreview && !this.mobilePreview.isDestroyed()) {\n            return this.mobilePreview.close();\n        }\n        this.mobilePreview = new MobilePreviewDialog(this, {\n            title: Markup(_.escape(_t('Mobile preview')) + ' <span class=\"fa fa-refresh\"/>'),\n        }).open();\n    },\n});\n\nregistry.category(\"website_navbar_widgets\").add(\"MobileMenu\", {\n    Widget: MobileMenu,\n    selector: '#mobile-menu',\n});\n\nreturn {\n    MobileMenu: MobileMenu,\n    MobilePreviewDialog: MobilePreviewDialog,\n};\n});\n", "odoo.define('website.newMenu', function (require) {\n'use strict';\n\nvar core = require('web.core');\nvar Dialog = require('web.Dialog');\nvar websiteNavbarData = require('website.navbar');\nvar wUtils = require('website.utils');\nvar tour = require('web_tour.tour');\n\nconst { registry } = require(\"@web/core/registry\");\n\nconst {qweb, _t} = core;\n\nvar enableFlag = 'enable_new_content';\n\nvar NewContentMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    xmlDependencies: ['/website/static/src/xml/website.editor.xml'],\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions || {}, {\n        close_all_widgets: '_handleCloseDemand',\n        new_page: '_createNewPage',\n    }),\n    events: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.events || {}, {\n        'click': '_onBackgroundClick',\n        'click [data-module-id]': '_onModuleIdClick',\n        'keydown': '_onBackgroundKeydown',\n    }),\n    // allow text to be customized with inheritance\n    newContentText: {\n        failed: _t('Failed to install \"%s\"'),\n        installInProgress: _t(\"The installation of an App is already in progress.\"),\n        installNeeded: _t('Do you want to install the \"%s\" App?'),\n        installPleaseWait: _t('Installing \"%s\"'),\n    },\n\n    /**\n     * Prepare the navigation and find the modules to install.\n     * Move not installed module buttons after installed modules buttons,\n     * but keep the original index to be able to move back the pending install\n     * button at its final position, so the user can click at the same place.\n     *\n     * @override\n     */\n    start: function () {\n        this.pendingInstall = false;\n        this.$newContentMenuChoices = this.$('#o_new_content_menu_choices');\n\n        var $modules = this.$newContentMenuChoices.find('.o_new_content_element');\n        _.each($modules, function (el, index) {\n            var $el = $(el);\n            $el.data('original-index', index);\n            if ($el.data('module-id')) {\n                $el.appendTo($el.parent());\n                $el.find('a i, a p').addClass('o_uninstalled_module');\n            }\n        });\n\n        this.$firstLink = this.$newContentMenuChoices.find('a:eq(0)');\n        this.$lastLink = this.$newContentMenuChoices.find('a:last');\n\n        if ($.deparam.querystring()[enableFlag] !== undefined) {\n            Object.keys(tour.tours).forEach(\n                el => {\n                    let element = tour.tours[el];\n                    if (element.steps[0].trigger == '#new-content-menu > a'\n                        && !element.steps[0].extra_trigger) {\n                        element.steps[0].auto = true;\n                    }\n                }\n            );\n            this._showMenu();\n        }\n        this.$loader = $(qweb.render('website.new_content_loader'));\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Actions\n    //--------------------------------------------------------------------------\n\n    /**\n     * Asks the user information about a new page to create, then creates it and\n     * redirects the user to this new page.\n     *\n     * @private\n     * @returns {Promise} Unresolved if there is a redirection\n     */\n    _createNewPage: function () {\n        return wUtils.prompt({\n            id: 'editor_new_page',\n            window_title: _t(\"New Page\"),\n            input: _t(\"Page Title\"),\n            init: function () {\n                var $group = this.$dialog.find('div.form-group');\n                $group.removeClass('mb0');\n\n                var $add = $('<div/>', {'class': 'form-group mb0 row'})\n                            .append($('<span/>', {'class': 'offset-md-3 col-md-9 text-left'})\n                                    .append(qweb.render('website.components.switch', {id: 'switch_addTo_menu', label: _t(\"Add to menu\")})));\n                $add.find('input').prop('checked', true);\n                $group.after($add);\n            }\n        }).then(function (result) {\n            // Remove any leading slash.\n            const val = result.val.replace(/^\\/*/, \"\");\n            var $dialog = result.dialog;\n            if (!val) {\n                return;\n            }\n            var url = '/website/add/' + encodeURIComponent(val);\n            const res = wUtils.sendRequest(url, {\n                add_menu: $dialog.find('input[type=\"checkbox\"]').is(':checked') || '',\n            });\n            return new Promise(function () {});\n        });\n    },\n    /**\n     * @private\n     */\n    _handleCloseDemand: function () {\n        this._hideMenu();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Set the focus on the first link\n     *\n     * @private\n     */\n    _focusFirstLink: function () {\n        this.$firstLink.focus();\n    },\n    /**\n     * Set the focus on the last link\n     *\n     * @private\n     */\n    _focusLastLink: function () {\n        this.$lastLink.focus();\n    },\n    /**\n     * Hide the menu\n     *\n     * @private\n     */\n    _hideMenu: function () {\n        this.shown = false;\n        this.$newContentMenuChoices.addClass('o_hidden');\n        $('body').removeClass('o_new_content_open');\n    },\n    /**\n     * Install a module\n     *\n     * @private\n     * @param {number} moduleId: the module to install\n     * @return {Promise}\n     */\n    _install: function (moduleId) {\n        this.pendingInstall = true;\n        $('body').css('pointer-events', 'none');\n        return this._rpc({\n            model: 'ir.module.module',\n            method: 'button_immediate_install',\n            args: [[moduleId]],\n        }).guardedCatch(function () {\n            $('body').css('pointer-events', '');\n        });\n    },\n    /**\n     * Show the menu\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _showMenu: function () {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n            self.trigger_up('action_demand', {\n                actionName: 'close_all_widgets',\n                onSuccess: resolve,\n                onFailure: reject,\n            });\n        }).then(function () {\n            self.firstTab = true;\n            self.shown = true;\n            self.$newContentMenuChoices.removeClass('o_hidden');\n            $('body').addClass('o_new_content_open');\n            self.$('> a').focus();\n        });\n    },\n    /**\n     * Called to add loader element in DOM.\n     *\n     * @param {string} moduleName\n     * @private\n     */\n    _addLoader(moduleName) {\n        const newContentLoaderText = _.str.sprintf(_t(\"Building your %s\"), moduleName);\n        this.$loader.find('#new_content_loader_text').replaceWith(newContentLoaderText);\n        $('body').append(this.$loader);\n    },\n    /**\n     * @private\n     */\n    _removeLoader() {\n        this.$loader.remove();\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when the menu's toggle button is clicked:\n     *  -> Opens the menu and reset the tab navigation (if closed)\n     *  -> Close the menu (if open)\n     * Called when a click outside the menu's options occurs -> Close the menu\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onBackgroundClick: function (ev) {\n        if (this.$newContentMenuChoices.hasClass('o_hidden')) {\n            this._showMenu();\n        } else {\n            this._hideMenu();\n        }\n    },\n    /**\n     * Called when a keydown occurs:\n     *  ESC -> Closes the modal\n     *  TAB -> Navigation (captured in the modal)\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onBackgroundKeydown: function (ev) {\n        if (!this.shown) {\n            return;\n        }\n        switch (ev.which) {\n            case $.ui.keyCode.ESCAPE:\n                this._hideMenu();\n                ev.stopPropagation();\n                break;\n            case $.ui.keyCode.TAB:\n                if (ev.shiftKey) {\n                    if (this.firstTab || document.activeElement === this.$firstLink[0]) {\n                        this._focusLastLink();\n                        ev.preventDefault();\n                    }\n                } else {\n                    if (this.firstTab || document.activeElement === this.$lastLink[0]) {\n                        this._focusFirstLink();\n                        ev.preventDefault();\n                    }\n                }\n                this.firstTab = false;\n                break;\n        }\n    },\n    /**\n     * Open the install dialog related to an element:\n     *  - open the dialog depending on access right and another pending install\n     *  - if ok to install, prepare the install action:\n     *      - call the proper action on click\n     *      - change the button text and style\n     *      - handle the result (reload on the same page or error)\n     *\n     * @private\n     * @param {Event} ev\n     */\n    _onModuleIdClick: function (ev) {\n        var self = this;\n        var $el = $(ev.currentTarget);\n        var $i = $el.find('a i');\n        var $p = $el.find('a p');\n\n        var title = $p.text();\n        var content = '';\n        var buttons;\n\n        var moduleId = $el.data('module-id');\n        var name = $el.data('module-shortdesc');\n\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        if (this.pendingInstall) {\n            content = this.newContentText.installInProgress;\n        } else {\n            content = _.str.sprintf(this.newContentText.installNeeded, name);\n            buttons = [{\n                text: _t(\"Install\"),\n                classes: 'btn-primary',\n                close: true,\n                click: function () {\n                    // move the element where it will be after installation\n                    var $finalPosition = self.$newContentMenuChoices\n                        .find('.o_new_content_element:not([data-module-id])')\n                        .filter(function () {\n                            return $(this).data('original-index') < $el.data('original-index');\n                        }).last();\n                    if ($finalPosition) {\n                        $el.fadeTo(400, 0, function () {\n                            // if once installed, button disapeear, don't need to move it.\n                            if (!$el.hasClass('o_new_content_element_once')) {\n                                $el.insertAfter($finalPosition);\n                            }\n                            // change style to use spinner\n                            $i.removeClass()\n                                .addClass('fa fa-spin fa-circle-o-notch fa-spin')\n                                .css('background-image', 'none');\n                            $p.removeClass('o_uninstalled_module')\n                                .text(_.str.sprintf(self.newContentText.installPleaseWait, name));\n                            $el.fadeTo(1000, 1);\n                            self._addLoader(name);\n                        });\n                    }\n\n                    self._install(moduleId).then(function () {\n                        var origin = window.location.origin;\n                        var redirectURL = $el.find('a').data('url') || (window.location.pathname + '?' + enableFlag);\n                        window.location.href = origin + redirectURL;\n                        self._removeLoader();\n                    }, function () {\n                        $i.removeClass()\n                            .addClass('fa fa-exclamation-triangle');\n                        $p.text(_.str.sprintf(self.newContentText.failed, name));\n                    });\n                }\n            }, {\n                text: _t(\"Cancel\"),\n                close: true,\n            }];\n        }\n\n        new Dialog(this, {\n            title: title,\n            size: 'medium',\n            $content: $('<div/>', {text: content}),\n            buttons: buttons\n        }).open();\n    },\n});\n\nregistry.category(\"website_navbar_widgets\").add(\"NewContentMenu\", {\n    Widget: NewContentMenu,\n    selector: '.o_new_content_menu',\n});\n\nreturn NewContentMenu;\n});\n", "odoo.define('website.seo', function (require) {\n'use strict';\n\nvar core = require('web.core');\nvar Class = require('web.Class');\nvar Dialog = require('web.Dialog');\nvar mixins = require('web.mixins');\nvar rpc = require('web.rpc');\nvar Widget = require('web.Widget');\nvar weWidgets = require('wysiwyg.widgets');\nvar websiteNavbarData = require('website.navbar');\nconst { session } = require('@web/session');\n\nconst { registry } = require(\"@web/core/registry\");\n\nvar _t = core._t;\n\n// This replaces \\b, because accents(e.g. \u00e0, \u00e9) are not seen as word boundaries.\n// Javascript \\b is not unicode aware, and words beginning or ending by accents won't match \\b\nvar WORD_SEPARATORS_REGEX = '([\\\\u2000-\\\\u206F\\\\u2E00-\\\\u2E7F\\'!\"#\\\\$%&\\\\(\\\\)\\\\*\\\\+,\\\\-\\\\.\\\\/:;<=>\\\\?\u00bf\u00a1@\\\\[\\\\]\\\\^_`\\\\{\\\\|\\\\}~\\\\s]+|^|$)';\n\nvar Suggestion = Widget.extend({\n    template: 'website.seo_suggestion',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n    events: {\n        'click .o_seo_suggestion': 'select',\n    },\n\n    init: function (parent, options) {\n        this.keyword = options.keyword;\n        this._super(parent);\n    },\n    select: function () {\n        this.trigger('selected', this.keyword);\n    },\n});\n\nvar SuggestionList = Widget.extend({\n    template: 'website.seo_suggestion_list',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n\n    init: function (parent, options) {\n        this.root = options.root;\n        this.language = options.language;\n        this.htmlPage = options.htmlPage;\n        this._super(parent);\n    },\n    start: function () {\n        this.refresh();\n    },\n    refresh: function () {\n        var self = this;\n        self.$el.append(_t(\"Loading...\"));\n        var context;\n        this.trigger_up('context_get', {\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        var language = self.language || context.lang.toLowerCase();\n        this._rpc({\n            route: '/website/seo_suggest',\n            params: {\n                keywords: self.root,\n                lang: language,\n            },\n        }).then(function (keyword_list) {\n            self.addSuggestions(JSON.parse(keyword_list));\n        });\n    },\n    addSuggestions: function (keywords) {\n        var self = this;\n        self.$el.empty();\n        // TODO Improve algorithm + Ajust based on custom user keywords\n        var regex = new RegExp(WORD_SEPARATORS_REGEX + self.root + WORD_SEPARATORS_REGEX, 'gi');\n        keywords = _.map(_.uniq(keywords), function (word) {\n            return word.replace(regex, '').trim();\n        });\n        // TODO Order properly ?\n        _.each(keywords, function (keyword) {\n            if (keyword) {\n                var suggestion = new Suggestion(self, {\n                    keyword: keyword,\n                });\n                suggestion.on('selected', self, function (word, language) {\n                    self.trigger('selected', word, language);\n                });\n                suggestion.appendTo(self.$el);\n            }\n        });\n     },\n});\n\nvar Keyword = Widget.extend({\n    template: 'website.seo_keyword',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n    events: {\n        'click a[data-action=remove-keyword]': 'destroy',\n    },\n\n    init: function (parent, options) {\n        this.keyword = options.word;\n        this.language = options.language;\n        this.htmlPage = options.htmlPage;\n        this.used_h1 = this.htmlPage.isInHeading1(this.keyword);\n        this.used_h2 = this.htmlPage.isInHeading2(this.keyword);\n        this.used_content = this.htmlPage.isInBody(this.keyword);\n        this._super(parent);\n    },\n    start: function () {\n        var self = this;\n        this.$('.o_seo_keyword_suggestion').empty();\n        this.suggestionList = new SuggestionList(this, {\n            root: this.keyword,\n            language: this.language,\n            htmlPage: this.htmlPage,\n        });\n        this.suggestionList.on('selected', this, function (word, language) {\n            this.trigger('selected', word, language);\n        });\n        return this.suggestionList.appendTo(this.$('.o_seo_keyword_suggestion')).then(function() {\n            self.htmlPage.on('title-changed', self, self._updateTitle);\n            self.htmlPage.on('description-changed', self, self._updateDescription);\n            self._updateTitle();\n            self._updateDescription();\n        });\n    },\n    destroy: function () {\n        this.trigger('removed');\n        this._super();\n    },\n    _updateTitle: function () {\n        var $title = this.$('.js_seo_keyword_title');\n        if (this.htmlPage.isInTitle(this.keyword)) {\n            $title.css('visibility', 'visible');\n        } else {\n            $title.css('visibility', 'hidden');\n        }\n    },\n    _updateDescription: function () {\n        var $description = this.$('.js_seo_keyword_description');\n        if (this.htmlPage.isInDescription(this.keyword)) {\n            $description.css('visibility', 'visible');\n        } else {\n            $description.css('visibility', 'hidden');\n        }\n    },\n});\n\nvar KeywordList = Widget.extend({\n    template: 'website.seo_list',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n    maxKeywords: 10,\n\n    init: function (parent, options) {\n        this.htmlPage = options.htmlPage;\n        this._super(parent);\n    },\n    start: function () {\n        var self = this;\n        var existingKeywords = self.htmlPage.keywords();\n        if (existingKeywords.length > 0) {\n            _.each(existingKeywords, function (word) {\n                self.add.call(self, word);\n            });\n        }\n    },\n    keywords: function () {\n        var result = [];\n        this.$('.js_seo_keyword').each(function () {\n            result.push($(this).data('keyword'));\n        });\n        return result;\n    },\n    isFull: function () {\n        return this.keywords().length >= this.maxKeywords;\n    },\n    exists: function (word) {\n        return _.contains(this.keywords(), word);\n    },\n    add: async function (candidate, language) {\n        var self = this;\n        // TODO Refine\n        var word = candidate ? candidate.replace(/[,;.:<>]+/g, ' ').replace(/ +/g, ' ').trim().toLowerCase() : '';\n        if (word && !self.isFull() && !self.exists(word)) {\n            var keyword = new Keyword(self, {\n                word: word,\n                language: language,\n                htmlPage: this.htmlPage,\n            });\n            keyword.on('removed', self, function () {\n               self.trigger('list-not-full');\n               self.trigger('content-updated', true);\n            });\n            keyword.on('selected', self, function (word, language) {\n                self.trigger('selected', word, language);\n            });\n            await keyword.appendTo(self.$el);\n        }\n        if (self.isFull()) {\n            self.trigger('list-full');\n        }\n        self.trigger('content-updated');\n    },\n});\n\nvar Preview = Widget.extend({\n    template: 'website.seo_preview',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n\n    init: function (parent, options) {\n        this.title = options.title;\n        this.url = options.url;\n        this.description = options.description;\n        if (this.description.length > 160) {\n            this.description = this.description.substring(0, 159) + '\u2026';\n        }\n        this._super(parent);\n    },\n});\n\nvar HtmlPage = Class.extend(mixins.PropertiesMixin, {\n    init: function () {\n        mixins.PropertiesMixin.init.call(this);\n        this.initTitle = this.title();\n        this.defaultTitle = $('meta[name=\"default_title\"]').attr('content');\n        this.initDescription = this.description();\n    },\n    url: function () {\n        return window.location.origin + window.location.pathname;\n    },\n    title: function () {\n        return $('head title').text().trim();\n    },\n    changeTitle: function (title) {\n        // TODO create tag if missing\n        $('head title').text(title.trim() || this.defaultTitle);\n        this.trigger('title-changed', title);\n    },\n    description: function () {\n        return ($('meta[name=description]').attr('content') || '').trim();\n    },\n    changeDescription: function (description) {\n        // TODO create tag if missing\n        $('meta[name=description]').attr('content', description);\n        this.trigger('description-changed', description);\n    },\n    keywords: function () {\n        var $keywords = $('meta[name=keywords]');\n        var parsed = ($keywords.length > 0) && $keywords.attr('content') && $keywords.attr('content').split(',');\n        return (parsed && parsed[0]) ? parsed: [];\n    },\n    changeKeywords: function (keywords) {\n        // TODO create tag if missing\n        $('meta[name=keywords]').attr('content', keywords.join(','));\n    },\n    headers: function (tag) {\n        return $('#wrap '+tag).map(function () {\n            return $(this).text();\n        });\n    },\n    getOgMeta: function () {\n        var ogImageUrl = $('meta[property=\"og:image\"]').attr('content');\n        var title = $('meta[property=\"og:title\"]').attr('content');\n        var description = $('meta[property=\"og:description\"]').attr('content');\n        return {\n            ogImageUrl: ogImageUrl && ogImageUrl.replace(window.location.origin, ''),\n            metaTitle: title,\n            metaDescription: description,\n        };\n    },\n    images: function () {\n        return $('#wrap img').filter(function () {\n            return this.naturalHeight >= 200 && this.naturalWidth >= 200;\n        }).map(function () {\n            return {\n                src: this.getAttribute('src'),\n                alt: this.getAttribute('alt'),\n            };\n        });\n    },\n    company: function () {\n        return $('html').attr('data-oe-company-name');\n    },\n    bodyText: function () {\n        return $('body').children().not('.oe_seo_configuration').text();\n    },\n    heading1: function () {\n        return $('body').children().not('.oe_seo_configuration').find('h1').text();\n    },\n    heading2: function () {\n        return $('body').children().not('.oe_seo_configuration').find('h2').text();\n    },\n    isInBody: function (text) {\n        return new RegExp(WORD_SEPARATORS_REGEX + text + WORD_SEPARATORS_REGEX, 'gi').test(this.bodyText());\n    },\n    isInTitle: function (text) {\n        return new RegExp(WORD_SEPARATORS_REGEX + text + WORD_SEPARATORS_REGEX, 'gi').test(this.title());\n    },\n    isInDescription: function (text) {\n        return new RegExp(WORD_SEPARATORS_REGEX + text + WORD_SEPARATORS_REGEX, 'gi').test(this.description());\n    },\n    isInHeading1: function (text) {\n        return new RegExp(WORD_SEPARATORS_REGEX + text + WORD_SEPARATORS_REGEX, 'gi').test(this.heading1());\n    },\n    isInHeading2: function (text) {\n        return new RegExp(WORD_SEPARATORS_REGEX + text + WORD_SEPARATORS_REGEX, 'gi').test(this.heading2());\n    },\n});\n\nvar MetaTitleDescription = Widget.extend({\n    // Form and preview for SEO meta title and meta description\n    //\n    // We only want to show an alert for \"description too small\" on those cases\n    // - at init and the description is not empty\n    // - we reached past the minimum and went back to it\n    // - focus out of the field\n    // Basically we don't want the too small alert when the field is empty and\n    // we start typing on it.\n    template: 'website.seo_meta_title_description',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n    events: {\n        'input input[name=website_meta_title]': '_titleChanged',\n        'input input[name=website_seo_name]': '_seoNameChanged',\n        'input textarea[name=website_meta_description]': '_descriptionOnInput',\n        'change textarea[name=website_meta_description]': '_descriptionOnChange',\n    },\n    maxRecommendedDescriptionSize: 300,\n    minRecommendedDescriptionSize: 50,\n    showDescriptionTooSmall: false,\n\n    /**\n     * @override\n     */\n    init: function (parent, options) {\n        this.htmlPage = options.htmlPage;\n        this.canEditTitle = !!options.canEditTitle;\n        this.canEditDescription = !!options.canEditDescription;\n        this.canEditUrl = !!options.canEditUrl;\n        this.isIndexed = !!options.isIndexed;\n        this.seoName = options.seoName;\n        this.seoNameDefault = options.seoNameDefault;\n        this.seoNameHelp = options.seoNameHelp;\n        this.previewDescription = options.previewDescription;\n        this._super(parent, options);\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        this.$title = this.$('input[name=website_meta_title]');\n        this.$seoName = this.$('input[name=website_seo_name]');\n        this.$seoNamePre = this.$('span.seo_name_pre');\n        this.$seoNamePost = this.$('span.seo_name_post');\n        this.$description = this.$('textarea[name=website_meta_description]');\n        this.$warning = this.$('div#website_meta_description_warning');\n        this.$preview = this.$('.js_seo_preview');\n\n        if (!this.canEditTitle) {\n            this.$title.attr('disabled', true);\n        }\n        if (!this.canEditDescription) {\n            this.$description.attr('disabled', true);\n        }\n        if (this.htmlPage.title().trim() !== this.htmlPage.defaultTitle.trim()) {\n            this.$title.val(this.htmlPage.title());\n        }\n        if (this.htmlPage.description().trim() !== this.previewDescription) {\n            this.$description.val(this.htmlPage.description());\n        }\n\n        if (this.canEditUrl) {\n            this.previousSeoName = this.seoName;\n            this.$seoName.val(this.seoName);\n            this.$seoName.attr('placeholder', this.seoNameDefault);\n            // make slug editable with input group for static text\n            const splitsUrl = window.location.pathname.split(this.previousSeoName || this.seoNameDefault);\n            this.$seoNamePre.text(splitsUrl[0]);\n            this.$seoNamePost.text(splitsUrl.slice(-1)[0]);  // at least the -id theorically\n        }\n        this._descriptionOnChange();\n    },\n    /**\n     * Get the current title\n     */\n    getTitle: function () {\n        return this.$title.val().trim() || this.htmlPage.defaultTitle;\n    },\n    /**\n     * Get the potential new url with custom seoName as slug.\n       I can differ after save if slug JS != slug Python, but it provide an idea for the preview\n     */\n    getUrl: function () {\n        const path = window.location.pathname.replace(\n            this.previousSeoName || this.seoNameDefault,\n            (this.$seoName.length && this.$seoName.val() ? this.$seoName.val().trim() : this.$seoName.attr('placeholder'))\n        );\n        return window.location.origin + path\n    },\n    /**\n     * Get the current description\n     */\n    getDescription: function () {\n        return this.getRealDescription() || this.previewDescription;\n    },\n    /**\n     * Get the current description chosen by the user\n     */\n    getRealDescription: function () {\n        return this.$description.val() || '';\n    },\n    /**\n     * @private\n     */\n    _titleChanged: function () {\n        var self = this;\n        self._renderPreview();\n        self.trigger('title-changed');\n    },\n    /**\n     * @private\n     */\n    _seoNameChanged: function () {\n        var self = this;\n        // don't use _, because we need to keep trailing whitespace during edition\n        const slugified = this.$seoName.val().toString().trim().normalize('NFKD').toLowerCase()\n            .replace(/\\s+/g, '-')           // Replace spaces with -\n            .replace(/[^\\w\\-]+/g, '')       // Remove all non-word chars\n            .replace(/\\-\\-+/g, '-');        // Replace multiple - with single -\n        this.$seoName.val(slugified);\n        self._renderPreview();\n    },\n    /**\n     * @private\n     */\n    _descriptionOnChange: function () {\n        this.showDescriptionTooSmall = true;\n        this._descriptionOnInput();\n    },\n    /**\n     * @private\n     */\n    _descriptionOnInput: function () {\n        var length = this.getDescription().length;\n\n        if (length >= this.minRecommendedDescriptionSize) {\n            this.showDescriptionTooSmall = true;\n        } else if (length === 0) {\n            this.showDescriptionTooSmall = false;\n        }\n\n        if (length > this.maxRecommendedDescriptionSize) {\n            this.$warning.text(_t('Your description looks too long.')).show();\n        } else if (this.showDescriptionTooSmall && length < this.minRecommendedDescriptionSize) {\n            this.$warning.text(_t('Your description looks too short.')).show();\n        } else {\n            this.$warning.hide();\n        }\n\n        this._renderPreview();\n        this.trigger('description-changed');\n    },\n    /**\n     * @private\n     */\n    _renderPreview: function () {\n        var indexed = this.isIndexed;\n        var preview = \"\";\n        if (indexed) {\n            preview = new Preview(this, {\n                title: this.getTitle(),\n                description: this.getDescription(),\n                url: this.getUrl(),\n            });\n        } else {\n            preview = new Preview(this, {\n                description: _t(\"You have hidden this page from search results. It won't be indexed by search engines.\"),\n            });\n        }\n        this.$preview.empty();\n        preview.appendTo(this.$preview);\n    },\n});\n\nvar MetaKeywords = Widget.extend({\n    // Form and table for SEO meta keywords\n    template: 'website.seo_meta_keywords',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n    events: {\n        'keyup input[name=website_meta_keywords]': '_confirmKeyword',\n        'click button[data-action=add]': '_addKeyword',\n    },\n\n    init: function (parent, options) {\n        this.htmlPage = options.htmlPage;\n        this._super(parent, options);\n    },\n    start: function () {\n        var self = this;\n        this.$input = this.$('input[name=website_meta_keywords]');\n        this.keywordList = new KeywordList(this, {htmlPage: this.htmlPage});\n        this.keywordList.on('list-full', this, function () {\n            self.$input.attr({\n                readonly: 'readonly',\n                placeholder: \"Remove a keyword first\"\n            });\n            self.$('button[data-action=add]').prop('disabled', true).addClass('disabled');\n        });\n        this.keywordList.on('list-not-full', this, function () {\n            self.$input.removeAttr('readonly').attr('placeholder', \"\");\n            self.$('button[data-action=add]').prop('disabled', false).removeClass('disabled');\n        });\n        this.keywordList.on('selected', this, function (word, language) {\n            self.keywordList.add(word, language);\n        });\n        this.keywordList.on('content-updated', this, function (removed) {\n            self._updateTable(removed);\n        });\n        return this.keywordList.insertAfter(this.$('.table thead')).then(function() {\n            self._getLanguages();\n            self._updateTable();\n        });\n    },\n    _addKeyword: function () {\n        var $language = this.$('select[name=seo_page_language]');\n        var keyword = this.$input.val();\n        var language = $language.val().toLowerCase();\n        this.keywordList.add(keyword, language);\n        this.$input.val('').focus();\n    },\n    _confirmKeyword: function (e) {\n        if (e.keyCode === 13) {\n            this._addKeyword();\n        }\n    },\n    _getLanguages: function () {\n        var self = this;\n        var context;\n        this.trigger_up('context_get', {\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        this._rpc({\n            route: '/website/get_languages',\n        }).then(function (data) {\n            self.$('#language-box').html(core.qweb.render('Configurator.language_promote', {\n                'language': data,\n                'def_lang': context.lang\n            }));\n        });\n    },\n    /*\n     * Show the table if there is at least one keyword. Hide it otherwise.\n     *\n     * @private\n     * @param {boolean} removed: a keyword is about to be removed,\n     *   we need to exclude it from the count\n     */\n    _updateTable: function (removed) {\n        var min = removed ? 1 : 0;\n        if (this.keywordList.keywords().length > min) {\n            this.$('table').show();\n        } else {\n            this.$('table').hide();\n        }\n    },\n});\n\nvar MetaImageSelector = Widget.extend({\n    template: 'website.seo_meta_image_selector',\n    xmlDependencies: ['/website/static/src/xml/website.seo.xml'],\n    events: {\n        'click .o_meta_img_upload': '_onClickUploadImg',\n        'click .o_meta_img': '_onClickSelectImg',\n    },\n    /**\n     * @override\n     * @param {widget} parent\n     * @param {Object} data\n     */\n    init: function (parent, data) {\n        this.metaTitle = data.title || '';\n        this.activeMetaImg = data.metaImg;\n        this.serverUrl = data.htmlpage.url();\n        const imgField = data.hasSocialDefaultImage ? 'social_default_image' : 'logo';\n        data.pageImages.unshift(_.str.sprintf('/web/image/website/%s/%s', session.website_id, imgField));\n        this.images = _.uniq(data.pageImages);\n        this.customImgUrl = _.contains(\n            data.pageImages.map((img)=>  new URL(img, window.location.origin).pathname),\n            new URL(data.metaImg, window.location.origin).pathname)\n            ? false : data.metaImg;\n        this.previewDescription = data.previewDescription;\n        this._setDescription(this.previewDescription);\n        this._super(parent);\n    },\n    setTitle: function (title) {\n        this.metaTitle = title;\n        this._updateTemplateBody();\n    },\n    setDescription: function (description) {\n        this._setDescription(description);\n        this._updateTemplateBody();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Set the description, applying ellipsis if too long.\n     *\n     * @private\n    */\n    _setDescription: function (description) {\n        this.metaDescription = description || this.previewDescription;\n        if (this.metaDescription.length > 160) {\n            this.metaDescription = this.metaDescription.substring(0, 159) + '\u2026';\n        }\n    },\n\n    /**\n     * Update template.\n     *\n     * @private\n    */\n    _updateTemplateBody: function () {\n        this.$el.empty();\n        this.images = _.uniq(this.images);\n        this.$el.append(core.qweb.render('website.og_image_body', {widget: this}));\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when a select image from list -> change the preview accordingly.\n     *\n     * @private\n     * @param {MouseEvent} ev\n     */\n    _onClickSelectImg: function (ev) {\n        var $img = $(ev.currentTarget);\n        this.activeMetaImg = $img.find('img').attr('src');\n        this._updateTemplateBody();\n    },\n    /**\n     * Open a mediaDialog to select/upload image.\n     *\n     * @private\n     * @param {MouseEvent} ev\n     */\n    _onClickUploadImg: function (ev) {\n        var self = this;\n        var $image = $('<img/>');\n        var mediaDialog = new weWidgets.MediaDialog(this, {\n            onlyImages: true,\n            res_model: 'ir.ui.view',\n        }, $image[0]);\n        mediaDialog.open();\n        mediaDialog.on('save', this, function (image) {\n            self.activeMetaImg = image.src;\n            self.customImgUrl = image.src;\n            self._updateTemplateBody();\n        });\n    },\n});\n\nvar SeoConfigurator = Dialog.extend({\n    template: 'website.seo_configuration',\n    xmlDependencies: Dialog.prototype.xmlDependencies.concat(\n        ['/website/static/src/xml/website.seo.xml']\n    ),\n    canEditTitle: false,\n    canEditDescription: false,\n    canEditKeywords: false,\n    canEditLanguage: false,\n    canEditUrl: false,\n\n    init: function (parent, options) {\n        options = options || {};\n        _.defaults(options, {\n            title: _t('Optimize SEO'),\n            buttons: [\n                {text: _t('Save'), classes: 'btn-primary', click: this.update},\n                {text: _t('Discard'), close: true},\n            ],\n        });\n\n        this._super(parent, options);\n    },\n    start: function () {\n        var self = this;\n\n        this.$modal.addClass('oe_seo_configuration');\n\n        this.htmlPage = new HtmlPage();\n\n        this.disableUnsavableFields().then(function () {\n            // Image selector\n            self.metaImageSelector = new MetaImageSelector(self, {\n                htmlpage: self.htmlPage,\n                hasSocialDefaultImage: self.hasSocialDefaultImage,\n                title: self.htmlPage.getOgMeta().metaTitle,\n                metaImg: self.metaImg || self.htmlPage.getOgMeta().ogImageUrl,\n                pageImages: _.pluck(self.htmlPage.images().get(), 'src'),\n                previewDescription: _t('The description will be generated by social media based on page content unless you specify one.'),\n            });\n            self.metaImageSelector.appendTo(self.$('.js_seo_image'));\n\n            // title and description\n            self.metaTitleDescription = new MetaTitleDescription(self, {\n                htmlPage: self.htmlPage,\n                canEditTitle: self.canEditTitle,\n                canEditDescription: self.canEditDescription,\n                canEditUrl: self.canEditUrl,\n                isIndexed: self.isIndexed,\n                previewDescription: _t('The description will be generated by search engines based on page content unless you specify one.'),\n                seoNameHelp: _t('This value will be escaped to be compliant with all major browsers and used in url. Keep it empty to use the default name of the record.'),\n                seoName: self.seoName, // 'my-custom-display-name' or ''\n                seoNameDefault: self.seoNameDefault, // 'display-name'\n            });\n            self.metaTitleDescription.on('title-changed', self, self.titleChanged);\n            self.metaTitleDescription.on('description-changed', self, self.descriptionChanged);\n            self.metaTitleDescription.appendTo(self.$('.js_seo_meta_title_description'));\n\n            // keywords\n            self.metaKeywords = new MetaKeywords(self, {htmlPage: self.htmlPage});\n            self.metaKeywords.appendTo(self.$('.js_seo_meta_keywords'));\n        });\n    },\n    /*\n     * Reset meta tags to their initial value if not saved.\n     *\n     * @private\n     */\n    destroy: function () {\n        if (!this.savedData) {\n            this.htmlPage.changeTitle(this.htmlPage.initTitle);\n            this.htmlPage.changeDescription(this.htmlPage.initDescription);\n        }\n        this._super.apply(this, arguments);\n    },\n    disableUnsavableFields: function () {\n        var self = this;\n        return this.loadMetaData().then(function (data) {\n            // We only need a reload for COW when the copy is happening, therefore:\n            // - no reload if we are not editing a view (condition: website_id === undefined)\n            // - reload if generic page (condition: website_id === false)\n            self.reloadOnSave = data.website_id === undefined ? false : !data.website_id;\n            //If website.page, hide the google preview & tell user his page is currently unindexed\n            self.isIndexed = (data && ('website_indexed' in data)) ? data.website_indexed : true;\n            self.canEditTitle = data && ('website_meta_title' in data);\n            self.canEditDescription = data && ('website_meta_description' in data);\n            self.canEditKeywords = data && ('website_meta_keywords' in data);\n            self.metaImg = data.website_meta_og_img;\n            self.hasSocialDefaultImage = data.has_social_default_image;\n            self.canEditUrl = data && ('seo_name' in data);\n            self.seoName = self.canEditUrl && data.seo_name;\n            self.seoNameDefault = self.canEditUrl && data.seo_name_default;\n            if (!self.canEditTitle && !self.canEditDescription && !self.canEditKeywords) {\n                // disable the button to prevent an error if the current page doesn't use the mixin\n                // we make the check here instead of on the view because we don't need to check\n                // at every page load, just when the rare case someone clicks on this link\n                // TODO don't show the modal but just an alert in this case\n                self.$footer.find('button[data-action=update]').attr('disabled', true);\n            }\n        });\n    },\n    update: function () {\n        var self = this;\n        var data = {};\n        if (this.canEditTitle) {\n            data.website_meta_title = this.metaTitleDescription.$title.val();\n        }\n        if (this.canEditDescription) {\n            data.website_meta_description = this.metaTitleDescription.$description.val();\n        }\n        if (this.canEditKeywords) {\n            data.website_meta_keywords = this.metaKeywords.keywordList.keywords().join(', ');\n        }\n        if (this.canEditUrl) {\n            if (this.metaTitleDescription.$seoName.val() != this.metaTitleDescription.previousSeoName) {\n                data.seo_name = this.metaTitleDescription.$seoName.val();\n                self.reloadOnSave = true;  // will force a refresh on old url and redirect to new slug\n            }\n        }\n        data.website_meta_og_img = this.metaImageSelector.activeMetaImg;\n        this.saveMetaData(data).then(function () {\n            // We want to reload if we are editing a generic page\n            // because it will become a specific page after this change (COW)\n            // and we want the user to be on the page he just created.\n            if (self.reloadOnSave) {\n                window.location.href = self.htmlPage.url();\n            } else {\n                self.htmlPage.changeKeywords(self.metaKeywords.keywordList.keywords());\n                self.savedData = true;\n                self.close();\n            }\n        });\n    },\n    getMainObject: function () {\n        var mainObject;\n        this.trigger_up('main_object_request', {\n            callback: function (value) {\n                mainObject = value;\n            },\n        });\n        return mainObject;\n    },\n    getSeoObject: function () {\n        var seoObject;\n        this.trigger_up('seo_object_request', {\n            callback: function (value) {\n                seoObject = value;\n            },\n        });\n        return seoObject;\n    },\n    loadMetaData: function () {\n        var obj = this.getSeoObject() || this.getMainObject();\n        return new Promise(function (resolve, reject) {\n            if (!obj) {\n                // return Promise.reject(new Error(\"No main_object was found.\"));\n                resolve(null);\n            } else {\n                rpc.query({\n                    route: \"/website/get_seo_data\",\n                    params: {\n                        'res_id': obj.id,\n                        'res_model': obj.model,\n                    },\n                }).then(function (data) {\n                    var meta = data;\n                    meta.model = obj.model;\n                    resolve(meta);\n                }).guardedCatch(reject);\n            }\n        });\n    },\n    saveMetaData: function (data) {\n        var obj = this.getSeoObject() || this.getMainObject();\n        if (!obj) {\n            return Promise.reject();\n        } else {\n            return this._rpc({\n                model: obj.model,\n                method: 'write',\n                args: [[obj.id], data],\n            });\n        }\n    },\n    titleChanged: function () {\n        var self = this;\n        _.defer(function () {\n            var title = self.metaTitleDescription.getTitle();\n            self.htmlPage.changeTitle(title);\n            self.metaImageSelector.setTitle(title);\n        });\n    },\n    descriptionChanged: function () {\n        var self = this;\n        _.defer(function () {\n            var description = self.metaTitleDescription.getRealDescription();\n            self.htmlPage.changeDescription(description);\n            self.metaImageSelector.setDescription(description);\n        });\n    },\n});\n\nvar SeoMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions || {}, {\n        'promote-current-page': '_promoteCurrentPage',\n    }),\n\n    init: function (parent, options) {\n        this._super(parent, options);\n\n        if ($.deparam.querystring().enable_seo !== undefined) {\n            this._promoteCurrentPage();\n        }\n    },\n\n    //--------------------------------------------------------------------------\n    // Actions\n    //--------------------------------------------------------------------------\n\n    /**\n     * Opens the SEO configurator dialog.\n     *\n     * @private\n     */\n    _promoteCurrentPage: function () {\n        new SeoConfigurator(this).open();\n    },\n});\n\nregistry.category(\"website_navbar_widgets\").add(\"SeoMenu\", {\n    Widget: SeoMenu,\n    selector: '#promote-menu',\n});\n\nreturn {\n    SeoConfigurator: SeoConfigurator,\n    SeoMenu: SeoMenu,\n};\n});\n", "odoo.define('website.translateMenu', function (require) {\n'use strict';\n\nrequire('web.dom_ready');\nvar core = require('web.core');\nvar weDialog = require('wysiwyg.widgets.Dialog');\nvar Dialog = require('web.Dialog');\nvar EditorMenu = require('website.editMenu');\nvar localStorage = require('web.local_storage');\nvar websiteNavbarData = require('website.navbar');\n\nconst { registry } = require(\"@web/core/registry\");\n\nvar _t = core._t;\n\nvar localStorageNoDialogKey = 'website_translator_nodialog';\n\nvar TranslatorInfoDialog = Dialog.extend({\n    template: 'website.TranslatorInfoDialog',\n    xmlDependencies: Dialog.prototype.xmlDependencies.concat(\n        ['/website/static/src/xml/translator.xml']\n    ),\n\n    /**\n     * @constructor\n     */\n    init: function (parent, options) {\n        this._super(parent, _.extend({\n            title: _t(\"Translation Info\"),\n            buttons: [\n                {text: _t(\"Ok, never show me this again\"), classes: 'btn-primary', close: true, click: this._onStrongOk.bind(this)},\n                {text: _t(\"Ok\"), close: true}\n            ],\n        }, options || {}));\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Called when the \"strong\" ok is clicked -> adapt localstorage to make sure\n     * the dialog is never displayed again.\n     *\n     * @private\n     */\n    _onStrongOk: function () {\n        localStorage.setItem(localStorageNoDialogKey, true);\n    },\n});\n\n// TODO: Handle this once images are handled.\nvar AttributeTranslateDialog = weDialog.extend({\n    /**\n     * @constructor\n     */\n    init: function (parent, options, node) {\n        this._super(parent, _.extend({\n            title: _t(\"Translate Attribute\"),\n            buttons: [\n                {text: _t(\"Close\"), classes: 'btn-primary', click: this.save}\n            ],\n        }, options || {}));\n        this.wysiwyg = options.wysiwyg;\n        this.node = node;\n        this.translation = $(node).data('translation');\n    },\n    /**\n     * @override\n     */\n    start: function () {\n        var $group = $('<div/>', {class: 'form-group'}).appendTo(this.$el);\n        _.each(this.translation, function (node, attr) {\n            var $node = $(node);\n            var $label = $('<label class=\"col-form-label\"></label>').text(attr);\n            var $input = $('<input class=\"form-control\"/>').val($node.html());\n            $input.on('change keyup', function () {\n                var value = $input.val();\n                $node.html(value).trigger('change', node);\n                const $originalNode = $node.data('$node');\n                const nodeAttribute = $node.data('attribute');\n                if (nodeAttribute) {\n                    $originalNode.attr(nodeAttribute, value);\n                    if (nodeAttribute === 'value') {\n                        $originalNode[0].value = value;\n                    }\n                    $originalNode.trigger('translate');\n                } else {\n                    $originalNode.val(value).trigger('translate');\n                }\n                $node.trigger('change');\n                $originalNode[0].classList.add('oe_translated');\n            });\n            $group.append($label).append($input);\n        });\n        return this._super.apply(this, arguments);\n    },\n});\n\n// Used to translate the text of `<select/>` options since it should not be\n// possible to interact with the content of `.o_translation_select` elements.\nconst SelectTranslateDialog = weDialog.extend({\n    /**\n     * @constructor\n     */\n    init(parent, options) {\n        this._super(parent, {\n            ...options,\n            title: _t(\"Translate Selection Option\"),\n            buttons: [\n                {text: _t(\"Close\"), click: this.save}\n            ],\n        });\n        this.optionEl = this.options.targetEl;\n        this.translationObject = this.optionEl.closest('[data-oe-translation-id]');\n    },\n    /**\n     * @override\n     */\n    start() {\n        const inputEl = document.createElement('input');\n        inputEl.className = 'form-control my-3';\n        inputEl.value = this.optionEl.textContent;\n        inputEl.addEventListener('keyup', () => {\n            this.optionEl.textContent = inputEl.value;\n            const translationUpdated = inputEl.value !== this.optionEl.dataset.initialTranslationValue;\n            this.translationObject.classList.toggle('o_dirty', translationUpdated);\n            this.optionEl.classList.toggle('oe_translated', translationUpdated);\n        });\n        this.el.appendChild(inputEl);\n        return this._super(...arguments);\n    },\n});\n\nconst savableSelector = '[data-oe-translation-id], ' +\n    '[data-oe-model][data-oe-id][data-oe-field], ' +\n    '[placeholder*=\"data-oe-translation-id=\"], ' +\n    '[title*=\"data-oe-translation-id=\"], ' +\n    '[value*=\"data-oe-translation-id=\"], ' +\n    'textarea:contains(data-oe-translation-id), ' +\n    '[alt*=\"data-oe-translation-id=\"]';\n\nvar TranslatePageMenu = websiteNavbarData.WebsiteNavbarActionWidget.extend({\n    assetLibs: ['web_editor.compiled_assets_wysiwyg', 'website.compiled_assets_wysiwyg'],\n\n    actions: _.extend({}, websiteNavbarData.WebsiteNavbar.prototype.actions || {}, {\n        edit_master: '_goToMasterPage',\n        translate: '_startTranslateMode',\n    }),\n    custom_events: {\n        ready_to_save: '_onSave',\n    },\n\n    /**\n     * @override\n     */\n    start: function () {\n        var context;\n        this.trigger_up('context_get', {\n            extra: true,\n            callback: function (ctx) {\n                context = ctx;\n            },\n        });\n        this._mustEditTranslations = context.edit_translations;\n        if (this._mustEditTranslations) {\n            var url = new URL(window.location.href);\n            url.searchParams.delete('edit_translations');\n            window.history.replaceState({}, null, url);\n\n            this._startTranslateMode();\n        }\n        return this._super.apply(this, arguments);\n    },\n\n    //--------------------------------------------------------------------------\n    // Actions\n    //--------------------------------------------------------------------------\n\n    /**\n     * Redirects the user to the same page but in the original language and in\n     * edit mode.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _goToMasterPage: function () {\n        var current = document.createElement('a');\n        current.href = window.location.toString();\n        current.search += (current.search ? '&' : '?') + 'enable_editor=1';\n        // We are in translate mode, the pathname starts with '/<url_code>'. By\n        // adding a trailing slash we can simply search for the first slash\n        // after the language code to remove the language part.\n        const startPath = (current.pathname + '/').indexOf('/', 1);\n        current.pathname = current.pathname.substring(startPath);\n\n        var link = document.createElement('a');\n        link.href = '/website/lang/default';\n        link.search += (link.search ? '&' : '?') + 'r=' + encodeURIComponent(current.pathname + current.search + current.hash);\n\n        window.location = link.href;\n        return new Promise(function () {});\n    },\n    /**\n     * Redirects the user to the same page in translation mode (or start the\n     * translator is translation mode is already enabled).\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _startTranslateMode: async function () {\n        const self = this;\n        if (!this._mustEditTranslations) {\n            window.location.search += '&edit_translations';\n            return new Promise(function () {});\n        }\n\n        const params = {\n            enableTranslation: true,\n            devicePreview: false,\n        };\n\n        const showNotification = ev => {\n            let message = _t('This translation is not editable.');\n            if (ev.target.closest('.s_table_of_content_navbar_wrap')) {\n                message = _t('Translate header in the text. Menu is generated automatically.');\n            }\n            this.displayNotification({\n                type: 'info',\n                message: message,\n                sticky: false,\n            });\n        };\n        for (const translationEl of $('.o_not_editable [data-oe-translation-id]').not(':o_editable')) {\n            translationEl.addEventListener('click', showNotification);\n        }\n\n        this.translator = new EditorMenu(this, {\n            wysiwygOptions: params,\n            savableSelector: savableSelector,\n            editableFromEditorMenu: () => {\n                return $(savableSelector)\n                    .not('[data-oe-readonly]');\n            },\n            beforeEditorActive: async () => {\n                const $editable = self._getEditableArea();\n                // Remove styles from table of content menu entries.\n                for (const el of $editable.filter('.s_table_of_content_navbar .table_of_content_link span[data-oe-translation-id]')) {\n                    const text = el.textContent; // Get text from el.\n                    el.textContent = text; // Replace all of el's content with that text.\n                }\n\n                var attrs = ['placeholder', 'title', 'alt', 'value'];\n                const translationRegex = /<span [^>]*data-oe-translation-id=\"([0-9]+)\"[^>]*>(.*)<\\/span>/;\n                let $edited = $();\n                _.each(attrs, function (attr) {\n                    const attrEdit = $editable.filter('[' + attr + '*=\"data-oe-translation-id=\"]').filter(':empty, input, select, textarea, img');\n                    attrEdit.each(function () {\n                        var $node = $(this);\n                        var translation = $node.data('translation') || {};\n                        var trans = $node.attr(attr);\n                        var match = trans.match(translationRegex);\n                        var $trans = $(trans).addClass('d-none o_editable o_editable_translatable_attribute').appendTo('body');\n                        $trans.data('$node', $node).data('attribute', attr);\n\n                        translation[attr] = $trans[0];\n                        $node.attr(attr, match[2]);\n                        // Using jQuery attr() to update the \"value\" will not change what appears in the\n                        // DOM and will not update the value property on inputs. We need to force the\n                        // right value instead of the original translation <span/>.\n                        if (attr === 'value') {\n                            $node[0].value = match[2];\n                        }\n\n                        $node.addClass('o_translatable_attribute').data('translation', translation);\n                    });\n                    $edited = $edited.add(attrEdit);\n                });\n                const textEdit = $editable.filter('textarea:contains(data-oe-translation-id)');\n                textEdit.each(function () {\n                    var $node = $(this);\n                    var translation = $node.data('translation') || {};\n                    var trans = $node.text();\n                    var match = trans.match(translationRegex);\n                    var $trans = $(trans).addClass('d-none o_editable o_editable_translatable_text').appendTo('body');\n                    $trans.data('$node', $node);\n\n                    translation['textContent'] = $trans[0];\n                    $node.val(match[2]);\n                    // Update the text content of textarea too.\n                    $node[0].innerText = match[2];\n\n                    $node.addClass('o_translatable_text').removeClass('o_text_content_invisible')\n                        .data('translation', translation);\n                });\n                $edited = $edited.add(textEdit);\n\n                $edited.each(function () {\n                    var $node = $(this);\n                    var select2 = $node.data('select2');\n                    if (select2) {\n                        select2.blur();\n                        $node.on('translate', function () {\n                            select2.blur();\n                        });\n                        $node = select2.container.find('input');\n                    }\n                });\n\n                // Hack: we add a temporary element to handle option's text\n                // translations from the linked <select/>. The final values are\n                // copied to the original element right before save.\n                self.selectTranslationEls = [];\n                $editable.filter('[data-oe-translation-id] > select').each((index, select) => {\n                    const selectTranslationEl = document.createElement('div');\n                    selectTranslationEl.className = 'o_translation_select';\n                    const optionNames = [...select.options].map(option => option.text);\n                    optionNames.forEach(option => {\n                        const optionEl = document.createElement('div');\n                        optionEl.textContent = option;\n                        optionEl.dataset.initialTranslationValue = option;\n                        optionEl.className = 'o_translation_select_option';\n                        selectTranslationEl.appendChild(optionEl);\n                    });\n                    select.before(selectTranslationEl);\n                    self.selectTranslationEls.push(selectTranslationEl);\n                });\n\n                self.translations = [];\n                self.$translations = self._getEditableArea().filter('.o_translatable_attribute, .o_translatable_text');\n                self.$editables = $('.o_editable_translatable_attribute, .o_editable_translatable_text');\n\n                self.$editables.on('change', function () {\n                    self.trigger_up('rte_change', {target: this});\n                });\n\n                self._markTranslatableNodes();\n                this.$translations.filter('input[type=hidden].o_translatable_input_hidden').prop('type', 'text');\n            },\n            processRecordsCallback(record, el) {\n                const tocMainEl = el.closest('.s_table_of_content_main');\n                const headerEl = el.closest('h1, h2');\n                if (!tocMainEl || !headerEl) {\n                    return;\n                }\n                const headerIndex = [...tocMainEl.querySelectorAll('h1, h2')].indexOf(headerEl);\n                const tocMenuEl = tocMainEl.closest('.s_table_of_content').querySelectorAll('.table_of_content_link > span')[headerIndex];\n                if (tocMenuEl.textContent !== headerEl.textContent) {\n                    tocMenuEl.textContent = headerEl.textContent;\n                    tocMenuEl.classList.add('o_dirty');\n                }\n            },\n        });\n\n        // We don't want the BS dropdown to close\n        // when clicking in a element to translate\n        $('.dropdown-menu').on('click', '.o_editable', function (ev) {\n            ev.stopPropagation();\n        });\n\n        if (!localStorage.getItem(localStorageNoDialogKey)) {\n            new TranslatorInfoDialog(this.translator).open();\n        }\n\n        await this.translator.prependTo(document.body);\n        // Apply data-oe-readonly on nested data.\n        $(savableSelector)\n            .filter(':has(' + savableSelector + ')')\n            .attr('data-oe-readonly', true);\n        await this.translator._startEditMode();\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * Return the editable area.\n     *\n     * @override\n     * @returns {JQuery}\n     */\n    _getEditableArea: function () {\n        return this.translator.wysiwyg.$editable.find(':o_editable').add(this.$editables);\n    },\n    /**\n     * Returns a translation object.\n     *\n     * @private\n     * @param {Node} node\n     * @returns {Object}\n     */\n    _getTranlationObject: function (node) {\n        var $node = $(node);\n        var id = +$node.data('oe-translation-id');\n        if (!id) {\n            id = $node.data('oe-model') + ',' + $node.data('oe-id') + ',' + $node.data('oe-field');\n        }\n        var trans = _.find(this.translations, function (trans) {\n            return trans.id === id;\n        });\n        if (!trans) {\n            this.translations.push(trans = {'id': id});\n        }\n        return trans;\n    },\n    /**\n     * @private\n     */\n    _markTranslatableNodes: function () {\n        var self = this;\n        this._getEditableArea().each(function () {\n            var $node = $(this);\n            var trans = self._getTranlationObject(this);\n            trans.value = (trans.value ? trans.value : $node.html()).replace(/[ \\t\\n\\r]+/, ' ');\n        });\n\n        // attributes\n\n        this.$translations.each(function () {\n            var $node = $(this);\n            var translation = $node.data('translation');\n            _.each(translation, function (node, attr) {\n                var trans = self._getTranlationObject(node);\n                trans.value = (trans.value ? trans.value : $node.html()).replace(/[ \\t\\n\\r]+/, ' ');\n                trans.state = node.dataset.oeTranslationState;\n                // If a node has an already translated attribute, we don't\n                // need to update its state, since it can be set again as\n                // \"to_translate\" by other attributes...\n                if ($node[0].dataset.oeTranslationState === 'translated') {\n                    return;\n                }\n                $node.attr('data-oe-translation-state', (trans.state || 'to_translate'));\n            });\n        });\n\n        this.$translations\n            .add(this._getEditableArea().filter('.o_translation_select_option'))\n            .prependEvent('mousedown.translator click.translator mouseup.translator', function (ev) {\n                if (ev.ctrlKey) {\n                    return;\n                }\n                ev.preventDefault();\n                ev.stopPropagation();\n                if (ev.type !== 'mousedown') {\n                    return;\n                }\n\n                const targetEl = ev.target;\n                if (targetEl.closest('.o_translation_select')) {\n                    new SelectTranslateDialog(self, {size: 'medium', targetEl}).open();\n                } else {\n                    new AttributeTranslateDialog(self, {}, ev.target).open();\n                }\n            });\n    },\n\n    //--------------------------------------------------------------------------\n    // Handlers\n    //--------------------------------------------------------------------------\n\n    _onSave: function (ev) {\n        ev.stopPropagation();\n        // Adapt translation values for `select` > `options`s and remove all\n        // temporary `.o_translation_select` elements.\n        for (const optionsEl of this.selectTranslationEls) {\n            const selectEl = optionsEl.nextElementSibling;\n            const translatedOptions = optionsEl.children;\n            const selectOptions = selectEl.tagName === 'SELECT' ? [...selectEl.options] : [];\n            if (selectOptions.length === translatedOptions.length) {\n                selectOptions.map((option, i) => {\n                    option.text = translatedOptions[i].textContent;\n                });\n            }\n            optionsEl.remove();\n        }\n    },\n});\n\nregistry.category(\"website_navbar_widgets\").add(\"TranslatePageMenu\", {\n    Widget: TranslatePageMenu,\n    selector: '.o_menu_systray:has([data-action=\"translate\"])',\n});\n\nreturn {\n    TranslatorInfoDialog: TranslatorInfoDialog,\n    AttributeTranslateDialog: AttributeTranslateDialog,\n    TranslatePageMenu: TranslatePageMenu,\n};\n\n});\n", "odoo.define('website.set_view_track', function (require) {\n\"use strict\";\n\nvar CustomizeMenu = require('website.customizeMenu');\nvar Widget = require('web.Widget');\n\nvar TrackPage = Widget.extend({\n    template: 'website.track_page',\n    xmlDependencies: ['/website/static/src/xml/track_page.xml'],\n    events: {\n        'change #switch-track-page': '_onTrackChange',\n    },\n\n    /**\n     * @override\n     */\n    start: function () {\n        this.$input = this.$('#switch-track-page');\n        this._isTracked().then((data) => {\n            if (data[0]['track']) {\n                this.track = true;\n                this.$input.attr('checked', 'checked');\n            } else {\n                this.track = false;\n            }\n        });\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @private\n     */\n    _isTracked: function (val) {\n        var viewid = $('html').data('viewid');\n        if (!viewid) {\n            return Promise.reject();\n        } else {\n            return this._rpc({\n                model: 'ir.ui.view',\n                method: 'read',\n                args: [[viewid], ['track']],\n            });\n        }\n    },\n    /**\n     * @private\n     */\n    _onTrackChange: function (ev) {\n        var checkboxValue = this.$input.is(':checked');\n        if (checkboxValue !== this.track) {\n            this.track = checkboxValue;\n            this._trackPage(checkboxValue);\n        }\n    },\n    /**\n     * @private\n     */\n    _trackPage: function (val) {\n        var viewid = $('html').data('viewid');\n        if (!viewid) {\n            return Promise.reject();\n        } else {\n            return this._rpc({\n                model: 'ir.ui.view',\n                method: 'write',\n                args: [[viewid], {track: val}],\n            });\n        }\n    },\n});\n\nCustomizeMenu.include({\n    _loadCustomizeOptions: function () {\n        var self = this;\n        var def = this._super.apply(this, arguments);\n        return def.then(function () {\n            if (!self.__trackpageLoaded) {\n                self.__trackpageLoaded = true;\n                self.trackPage = new TrackPage(self);\n                self.trackPage.appendTo(self.$el.children('.dropdown-menu'));\n            }\n        });\n    },\n});\n\n});\n", "odoo.define(\"website.tour.homepage\", function (require) {\n\"use strict\";\n\nconst wTourUtils = require(\"website.tour_utils\");\n\nconst snippets = [\n    {\n        id: 's_cover',\n        name: 'Cover',\n    },\n    {\n        id: 's_text_image',\n        name: 'Text - Image',\n    },\n    {\n        id: 's_three_columns',\n        name: 'Columns',\n    },\n    {\n        id: 's_picture',\n        name: 'Picture',\n    },\n    {\n        id: 's_quotes_carousel',\n        name: 'Quotes',\n    },\n    {\n        id: 's_call_to_action',\n        name: 'Call to Action',\n    },\n];\n\nwTourUtils.registerThemeHomepageTour('homepage', [\n    wTourUtils.dragNDrop(snippets[0]),\n    wTourUtils.clickOnText(snippets[0], 'h1'),\n    wTourUtils.goBackToBlocks(),\n    wTourUtils.dragNDrop(snippets[1]),\n    wTourUtils.dragNDrop(snippets[2]),\n    wTourUtils.dragNDrop(snippets[3]),\n    wTourUtils.dragNDrop(snippets[4]),\n    wTourUtils.dragNDrop(snippets[5]),\n    wTourUtils.clickOnSnippet(snippets[5], 'top'),\n    wTourUtils.changeBackgroundColor(),\n]);\n\n});\n", "odoo.define(\"website.tour_utils\", function (require) {\n\"use strict\";\n\nconst {_t} = require(\"web.core\");\nconst {Markup} = require('web.utils');\nvar tour = require(\"web_tour.tour\");\n\nfunction addMedia(position = \"right\") {\n    return {\n        trigger: `.modal-content footer .btn-primary`,\n        content: Markup(_t(\"<b>Add</b> the selected image.\")),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction changeBackground(snippet, position = \"bottom\") {\n    return {\n        trigger: \".o_we_customize_panel .o_we_bg_success\",\n        content: Markup(_t(\"<b>Customize</b> any block through this menu. Try to change the background image of this block.\")),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction changeBackgroundColor(position = \"bottom\") {\n    return {\n        trigger: \".o_we_customize_panel .o_we_color_preview\",\n        content: Markup(_t(\"<b>Customize</b> any block through this menu. Try to change the background color of this block.\")),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction selectColorPalette(position = \"left\") {\n    return {\n        trigger: \".o_we_customize_panel .o_we_so_color_palette we-selection-items\",\n        alt_trigger: \".o_we_customize_panel .o_we_color_preview\",\n        content: Markup(_t(`<b>Select</b> a Color Palette.`)),\n        position: position,\n        run: 'click',\n        location: position === 'left' ? '#oe_snippets' : undefined,\n    };\n}\n\nfunction changeColumnSize(position = \"right\") {\n    return {\n        trigger: `.oe_overlay.ui-draggable.o_we_overlay_sticky.oe_active .o_handle.e`,\n        content: Markup(_t(\"<b>Slide</b> this button to change the column size.\")),\n        position: position,\n    };\n}\n\nfunction changeIcon(snippet, index = 0, position = \"bottom\") {\n    return {\n        trigger: `#wrapwrap .${snippet.id} i:eq(${index})`,\n        extra_trigger: \"body.editor_enable\",\n        content: Markup(_t(\"<b>Double click on an icon</b> to change it with one of your choice.\")),\n        position: position,\n        run: \"dblclick\",\n    };\n}\n\nfunction changeImage(snippet, position = \"bottom\") {\n    return {\n        trigger: snippet.id ? `#wrapwrap .${snippet.id} img` : snippet,\n        extra_trigger: \"body.editor_enable\",\n        content: Markup(_t(\"<b>Double click on an image</b> to change it with one of your choice.\")),\n        position: position,\n        run: \"dblclick\",\n    };\n}\n\n/**\n    wTourUtils.changeOption('HeaderTemplate', '[data-name=\"header_alignment_opt\"]', _t('alignment')),\n*/\nfunction changeOption(optionName, weName = '', optionTooltipLabel = '', position = \"bottom\") {\n    const option_block = `we-customizeblock-option[class='snippet-option-${optionName}']`\n    return {\n        trigger: `${option_block} ${weName}, ${option_block} [title='${weName}']`,\n        content: Markup(_.str.sprintf(_t(\"<b>Click</b> on this option to change the %s of the block.\"), optionTooltipLabel)),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction selectNested(trigger, optionName, alt_trigger = null, optionTooltipLabel = '', position = \"top\") {\n    const option_block = `we-customizeblock-option[class='snippet-option-${optionName}']`;\n    return {\n        trigger: trigger,\n        content: Markup(_.str.sprintf(_t(\"<b>Select</b> a %s.\"), optionTooltipLabel)),\n        alt_trigger: alt_trigger == null ? undefined : `${option_block} ${alt_trigger}`,\n        position: position,\n        run: 'click',\n        location: position === 'left' ? '#oe_snippets' : undefined,\n    };\n}\n\nfunction changePaddingSize(direction) {\n    let paddingDirection = \"n\";\n    let position = \"top\";\n    if (direction === \"bottom\") {\n        paddingDirection = \"s\";\n        position = \"bottom\";\n    }\n    return {\n        trigger: `.oe_overlay.ui-draggable.o_we_overlay_sticky.oe_active .o_handle.${paddingDirection}`,\n        content: Markup(_.str.sprintf(_t(\"<b>Slide</b> this button to change the %s padding\"), direction)),\n        consumeEvent: 'mousedown',\n        position: position,\n    };\n}\n\n/**\n * Click on the top right edit button\n *\n * @deprecated use `clickOnEditAndWaitEditMode` instead to avoid race condition\n */\nfunction clickOnEdit(position = \"bottom\") {\n    return {\n        trigger: \"a[data-action=edit]\",\n        content: Markup(_t(\"<b>Click Edit</b> to start designing your homepage.\")),\n        extra_trigger: \".homepage\",\n        position: position,\n    };\n}\n\n/**\n * Click on the top right edit button and wait for the edit mode\n *\n * @param {string} position Where the purple arrow will show up\n */\nfunction clickOnEditAndWaitEditMode(position = \"bottom\") {\n    return [{\n        content: _t(\"<b>Click Edit</b> to start designing your homepage.\"),\n        trigger: \"a[data-action=edit]\",\n        position: position,\n    }, {\n        content: \"Check that we are in edit mode\",\n        trigger: '#oe_snippets.o_loaded',\n        run: () => null, // it's a check\n    }];\n}\n\n/**\n * Simple click on a snippet in the edition area\n * @param {*} snippet\n * @param {*} position\n */\nfunction clickOnSnippet(snippet, position = \"bottom\") {\n    return {\n        trigger: snippet.id ? `#wrapwrap .${snippet.id}` : snippet,\n        extra_trigger: \"body.editor_enable #oe_snippets.o_loaded\",\n        content: Markup(_t(\"<b>Click on a snippet</b> to access its options menu.\")),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction clickOnSave(position = \"bottom\") {\n    return [{\n        trigger: \"button[data-action=save]\",\n        // TODO this should not be needed but for now it better simulates what\n        // an human does. By the time this was added, it's technically possible\n        // to drag and drop a snippet then immediately click on save and have\n        // some problem. Worst case probably is a traceback during the redirect\n        // after save though so it's not that big of an issue. The problem will\n        // of course be solved (or at least prevented in stable). More details\n        // in related commit message.\n        extra_trigger: \"#oe_snippets:not(:has(.o_we_already_dragging))\",\n        in_modal: false,\n        content: Markup(_t(\"Good job! It's time to <b>Save</b> your work.\")),\n        position: position,\n    }, {\n        trigger: 'body:not(.editor_enable)',\n        auto: true, // Just making sure save is finished in automatic tests\n        run: () => null,\n    }];\n}\n\n/**\n * Click on a snippet's text to modify its content\n * @param {*} snippet\n * @param {*} element Target the element which should be rewrite\n * @param {*} position\n */\nfunction clickOnText(snippet, element, position = \"bottom\") {\n    return {\n        trigger: snippet.id ? `#wrapwrap .${snippet.id} ${element}` : snippet,\n        extra_trigger: \"body.editor_enable\",\n        content: Markup(_t(\"<b>Click on a text</b> to start editing it.\")),\n        position: position,\n        run: \"text\",\n        consumeEvent: \"input\",\n    };\n}\n\n/**\n * Drag a snippet from the Blocks area and drop it in the Edit area\n * @param {*} snippet contain the id and the name of the targeted snippet\n * @param {*} position Where the purple arrow will show up\n */\nfunction dragNDrop(snippet, position = \"bottom\") {\n    return {\n        trigger: `#oe_snippets .oe_snippet[name=\"${snippet.name}\"] .oe_snippet_thumbnail:not(.o_we_already_dragging)`,\n        extra_trigger: \"body.editor_enable.editor_has_snippets\",\n        moveTrigger: '.oe_drop_zone',\n        content: Markup(_.str.sprintf(_t(\"Drag the <b>%s</b> building block and drop it at the bottom of the page.\"), snippet.name)),\n        position: position,\n        // Normally no main snippet can be dropped in the default footer but\n        // targeting it allows to force \"dropping at the end of the page\".\n        run: \"drag_and_drop #wrapwrap > footer\",\n    };\n}\n\nfunction goBackToBlocks(position = \"bottom\") {\n    return {\n        trigger: '.o_we_add_snippet_btn',\n        content: _t(\"Click here to go back to block tab.\"),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction goToTheme(position = \"bottom\") {\n    return {\n        trigger: '.o_we_customize_theme_btn',\n        content: _t(\"Go to the Theme tab\"),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction selectHeader(position = \"bottom\") {\n    return {\n        trigger: `header#top`,\n        content: Markup(_t(`<b>Click</b> on this header to configure it.`)),\n        position: position,\n        run: \"click\",\n    };\n}\n\nfunction selectSnippetColumn(snippet, index = 0, position = \"bottom\") {\n     return {\n        trigger: `#wrapwrap .${snippet.id} .row div[class*=\"col-lg-\"]:eq(${index})`,\n        content: Markup(_t(\"<b>Click</b> on this column to access its options.\")),\n         position: position,\n        run: \"click\",\n     };\n}\n\nfunction prepend_trigger(steps, prepend_text='') {\n    for (const step of steps) {\n        if (!step.noPrepend && prepend_text) {\n            step.trigger = prepend_text + step.trigger;\n        }\n    }\n    return steps;\n}\n\nfunction registerThemeHomepageTour(name, steps) {\n    tour.register(name, {\n        url: \"/?enable_editor=1\",\n        sequence: 1010,\n        saveAs: \"homepage\",\n    }, prepend_trigger(\n        steps.concat(clickOnSave()),\n        \"html[data-view-xmlid='website.homepage'] \"\n    ));\n}\n\nfunction clickOnExtraMenuItem(stepOptions) {\n    return Object.assign({}, {\n        content: \"Click on the extra menu dropdown toggle if it is there\",\n        trigger: '#top_menu',\n        run: function () {\n            const extraMenuButton = this.$anchor[0].querySelector('.o_extra_menu_items a.nav-link');\n            if (extraMenuButton) {\n                extraMenuButton.click();\n            }\n        },\n    }, stepOptions);\n}\n\nreturn {\n    addMedia,\n    changeBackground,\n    changeBackgroundColor,\n    changeColumnSize,\n    changeIcon,\n    changeImage,\n    changeOption,\n    changePaddingSize,\n    clickOnEdit,\n    clickOnEditAndWaitEditMode,\n    clickOnSave,\n    clickOnSnippet,\n    clickOnText,\n    dragNDrop,\n    goBackToBlocks,\n    goToTheme,\n    selectColorPalette,\n    selectHeader,\n    selectNested,\n    selectSnippetColumn,\n    registerThemeHomepageTour,\n    clickOnExtraMenuItem,\n};\n});\n", "odoo.define(\"website.ace\", function (require) {\n\"use strict\";\n\nvar AceEditor = require('web_editor.ace');\n\n/**\n * Extends the default view editor so that the URL hash is updated with view ID\n */\nvar WebsiteAceEditor = AceEditor.extend({\n    hash: '#advanced-view-editor',\n\n    //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    do_hide: function () {\n        this._super.apply(this, arguments);\n        window.location.hash = \"\";\n    },\n\n    //--------------------------------------------------------------------------\n    // Private\n    //--------------------------------------------------------------------------\n\n    /**\n     * @override\n     */\n    _displayResource: function () {\n        this._super.apply(this, arguments);\n        this._updateHash();\n    },\n    /**\n     * @override\n     */\n    _saveResources: function () {\n        return this._super.apply(this, arguments).then((function () {\n            var defs = [];\n            if (this.currentType === 'xml') {\n                // When saving a view, the view ID might change. Thus, the\n                // active ID in the URL will be incorrect. After the save\n                // reload, that URL ID won't be found and JS will crash.\n                // We need to find the new ID (either because the view became\n                // specific or because its parent was edited too and the view\n                // got copy/unlink).\n                var selectedView = _.findWhere(this.views, {id: this._getSelectedResource()});\n                var context;\n                this.trigger_up('context_get', {\n                    callback: function (ctx) {\n                        context = ctx;\n                    },\n                });\n                defs.push(this._rpc({\n                    model: 'ir.ui.view',\n                    method: 'search_read',\n                    fields: ['id'],\n                    domain: [['key', '=', selectedView.key], ['website_id', '=', context.website_id]],\n                }).then((function (view) {\n                    if (view[0]) {\n                        this._updateHash(view[0].id);\n                    }\n                }).bind(this)));\n            }\n            return Promise.all(defs).then((function () {\n                window.location.reload();\n                return new Promise(function () {});\n            }));\n        }).bind(this));\n    },\n    /**\n     * @override\n     */\n    _switchType(type) {\n        const ret = this._super(...arguments);\n\n        if (type === 'scss') {\n            // By default show the user_custom_rules.scss one as some people\n            // would write rules in user_custom_bootstrap_overridden.scss\n            // otherwise, not reading the comment inside explaining how that\n            // file should be used.\n            this._displayResource('/website/static/src/scss/user_custom_rules.scss');\n        }\n\n        return ret;\n    },\n    /**\n     * @override\n     */\n    _resetResource: function () {\n        return this._super.apply(this, arguments).then((function () {\n            window.location.reload();\n            return new Promise(function () {});\n        }).bind(this));\n    },\n    /**\n     * Adds the current resource ID in the URL.\n     *\n     * @private\n     */\n    _updateHash: function (resID) {\n        window.location.hash = this.hash + \"?res=\" + (resID || this._getSelectedResource());\n    },\n});\n\nreturn WebsiteAceEditor;\n});\n"], "file": "/web/assets/254-ffe3a83/1/website.assets_editor.js", "sourceRoot": "../../../../"}